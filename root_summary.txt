=== DIRECTORY TREE ===
./
    .gitignore
    README.md
    docker-compose.yml
    print_project.py
    readme_notes
    backend/
        .env
        .env.production
        Dockerfile
        README.md
        alembic.ini
        config.py
        database.py
        main.py
        requirements.txt
        alembic/
            README
            env.py
            script.py.mako
            versions/
                053cac454d6a_add_description_field_to_book_model3.py
                3a60b9e00e52_add_description_field_to_book_model.py
                7ec848372607_init.py
                a9e8c1f22eb3_create_books_table.py
                dbadf1122f88_user_books_pivot_drop_shelf_column.py
        core/
            dependencies.py
            security.py
        data/
        models/
            __init__.py
            book.py
            bookshelf.py
            user.py
        routers/
            auth.py
            books.py
        schemas/
            __init__.py
            book.py
            token.py
            user.py
        utils/
            seeder.py
    frontend/
        .env
        .env.production
        .gitignore
        Dockerfile
        README.md
        eslint.config.js
        index.html
        nginx.conf
        vite.config.js
        webstorm_configs.jpg
        public/
            vite.svg
        src/
            AppLayout.jsx
            BooksAPI.js
            main.jsx
            assets/
                css/
                    styles.css
            components/
                common/
                    ScrollToTop.jsx
                    BookCard/
                        BookCard.jsx
                        ShelfSelector.jsx
                homepage/
                    ShelfSection.jsx
            context/
                AuthContext.jsx
                BooksContext.jsx
            pages/
                BookDetailsPage.jsx
                HomePage.jsx
                LoginPage.jsx
                SearchPage.jsx
                SignupPage.jsx
            routes/
                RequireAuth.jsx
                routes.jsx
            utils/
                api.js

--- PATH: .gitignore ---
### PythonVanilla template
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class
*.db
# C extensions
*.so
print_project.py

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/


### ReactNative template
# React Native Stack Base

.expo
__generated__

### NextJS template
# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

### Node template
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

### react template
.DS_*
*.log
logs
**/*.backup.*
**/*.back.*

node_modules
bower_components

*.sublime*

psd
thumb
sketch

### Python template
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio, WebStorm and Rider
# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839

# User-specific stuff
.idea/**/workspace.xml
.idea/**/tasks.xml
.idea/**/usage.statistics.xml
.idea/**/dictionaries
.idea/**/shelf

# AWS User-specific
.idea/**/aws.xml

# Generated files
.idea/**/contentModel.xml

# Sensitive or high-churn files
.idea/**/dataSources/
.idea/**/dataSources.ids
.idea/**/dataSources.local.xml
.idea/**/sqlDataSources.xml
.idea/**/dynamic.xml
.idea/**/uiDesigner.xml
.idea/**/dbnavigator.xml

# Gradle
.idea/**/gradle.xml
.idea/**/libraries

# Gradle and Maven with auto-import
# When using Gradle or Maven with auto-import, you should exclude module files,
# since they will be recreated, and may cause churn.  Uncomment if using
# auto-import.
# .idea/artifacts
# .idea/compiler.xml
# .idea/jarRepositories.xml
# .idea/modules.xml
# .idea/*.iml
# .idea/modules
# *.iml
# *.ipr

# CMake
cmake-build-*/

# Mongo Explorer plugin
.idea/**/mongoSettings.xml

# File-based project format
*.iws

# IntelliJ
out/

# mpeltonen/sbt-idea plugin
.idea_modules/

# JIRA plugin
atlassian-ide-plugin.xml

# Cursive Clojure plugin
.idea/replstate.xml

# SonarLint plugin
.idea/sonarlint/

# Crashlytics plugin (for Android Studio and IntelliJ)
com_crashlytics_export_strings.xml
crashlytics.properties
crashlytics-build.properties
fabric.properties

# Editor-based Rest Client
.idea/httpRequests

# Android studio 3.1+ serialized cache file
.idea/caches/build_file_checksums.ser

.idea/
.venv/

--- PATH: docker-compose.yml ---
version: "3.9"

services:
  myreads-backend:
    build: ./backend
    container_name: myreads-backend
    env_file: ./backend/.env.production
    restart: unless-stopped
    networks: [nginx_network]

  myreads-frontend:
    build:
      context: ./frontend
    container_name: myreads-frontend
    env_file: ./frontend/.env.production
    depends_on: [myreads-backend]
    restart: unless-stopped
    networks: [nginx_network]

networks:
  nginx_network:
    external: true

--- PATH: print_project.py ---
from __future__ import annotations
import os
import re
import sys
from pathlib import Path
from typing import Iterable, List
SKIP_DIRS = {".venv", "venv", "__pycache__", ".git", ".idea", ".vscode", ".pytest_cache", "node_modules", "dist", "build", "__pycache__", ".tox", ".mypy_cache", "coverage", ".eggs", ".cache", ".pytest_cache", ".ruff_cache", ".ruff", ".mypy_cache"}
SKIP_EXTS = {".db", ".json", ".lock", ".pyc", ".pyo", ".pyd", ".egg", ".whl", ".zip", ".tar.gz", ".tar.bz2", ".gz", ".xz", ".7z"}
def should_skip(path: Path) -> bool:
    if any(part in SKIP_DIRS for part in path.parts):
        return True
    return path.suffix in SKIP_EXTS
def iter_files(root: Path) -> Iterable[Path]:
    for dirpath, dirnames, filenames in os.walk(root):
        dirnames[:] = [d for d in dirnames if d not in SKIP_DIRS]
        for fname in filenames:
            fp = Path(dirpath) / fname
            if not should_skip(fp):
                yield fp.relative_to(root)
def build_tree(root: Path) -> List[str]:
    tree_lines: List[str] = []
    for dirpath, dirnames, filenames in os.walk(root):
        dirnames[:] = [d for d in dirnames if d not in SKIP_DIRS]
        level = Path(dirpath).relative_to(root).parts
        indent = "    " * len(level)
        basename = Path(dirpath).name if dirpath != str(root) else "."
        tree_lines.append(f"{indent}{basename}/")
        for fname in sorted(filenames):
            fp = Path(dirpath) / fname
            if should_skip(fp):
                continue
            tree_lines.append(f"{indent}    {fname}")
    return tree_lines
_TRIPLE_QUOTE_PATTERN = re.compile(r'(|\'\'\'[\s\S]*?\'\'\')', re.DOTALL)
def strip_docstrings(source: str) -> str:
    return re.sub(_TRIPLE_QUOTE_PATTERN, "", source)
def minify_python(source: str) -> str:
    text = strip_docstrings(source)
    out_lines: List[str] = []
    for line in text.splitlines():
        stripped = line.strip()
        if not stripped or stripped.startswith("#"):
            continue
        new_line = ""
        i, in_single, in_double = 0, False, False
        while i < len(line):
            ch = line[i]
            if ch == "'" and not in_double:
                in_single = not in_single
                new_line += ch
            elif ch == '"' and not in_single:
                in_double = not in_double
                new_line += ch
            elif ch == "#" and not in_single and not in_double:
                break
            else:
                new_line += ch
            i += 1
        if new_line.strip():
            out_lines.append(new_line.rstrip())
    return "\n".join(out_lines)
def generate_summary(root: Path) -> str:
    lines: List[str] = []
    lines.append("=== DIRECTORY TREE ===")
    lines.extend(build_tree(root))
    for rel_fp in iter_files(root):
        lines.append(f"\n--- PATH: {rel_fp} ---")
        full_fp = root / rel_fp
        try:
            text = full_fp.read_text(encoding="utf-8")
        except (UnicodeDecodeError, PermissionError):
            lines.append("[UNREADABLE]")
            continue
        if rel_fp.suffix == ".py":
            lines.append(minify_python(text))
        else:
            lines.append(text.rstrip())
    return "\n".join(lines) + "\n"
def main() -> None:
    root_arg = Path(sys.argv[1]) if len(sys.argv) > 1 else Path(".")
    root = root_arg.resolve()
    summary_text = generate_summary(root)
    out_name = f"{root_arg.name or 'root'}_summary.txt"
    Path(out_name).write_text(summary_text, encoding="utf-8")
    print(summary_text)
if __name__ == "__main__":
    main()

--- PATH: README.md ---

# MyReads — Full-Stack Bookshelf App
*A reference implementation of a modern, container-first FastAPI + React/Vite SPA*

---

## 1. Business & Solution Overview
| Pillar | Detail                                                                                                                                                                                                   |
|--------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| **Problem** | Personal reading trackers are often split between clunky spreadsheets or single-device mobile apps.                                                                                                      |
| **Goal** | Provide a unified **web** experience where each user can search, shelf, and track books from any device.                                                                                                 |
| **Architecture** | **Front-end** (Vite + React) served by a tiny Nginx, **FastAPI** back end, Postgres database, all orchestrated via Docker Compose and routed through a **central, TLS-terminating Nginx** reverse-proxy. |

---

## 2. Folder Structure
```
myreads-app/
├── backend/           # FastAPI source, Alembic migrations, Dockerfile
│   ├── alembic/...
│   ├── routers/...
│   ├── models/...
│   ├── main.py
│   └── Dockerfile
├── frontend/          # React + Vite SPA, micro-Nginx, Dockerfile
│   ├── src/...
│   ├── nginx.conf
│   └── Dockerfile
├── docker-compose.yml
└── README.md          # ← you are here
```

---

## 3. Backend (FastAPI)
### 3.1 Local setup (SQLite)
```bash
cd backend
python -m venv .venv && source .venv/bin/activate
pip install -r requirements.txt
alembic upgrade head
uvicorn backend.main:app --reload
```

`.env` (dev)
```env
DB_ENGINE=sqlite
DATABASE_URL=sqlite:///./myreads.db
SEED_DB=true
```

### 3.2 Production setup (Postgres)
Create database inside existing Postgres container:
```bash
docker exec -it postgres_db psql -U postgres   -c "CREATE DATABASE myreads;"   -c "CREATE USER dbuser WITH PASSWORD 'Super$ecret1';"   -c "GRANT ALL PRIVILEGES ON DATABASE myreads TO dbuser;"
```

`.env.production`
```env
DB_ENGINE=postgres
DATABASE_URL=postgresql+psycopg2://dbuser:Super$ecret1@postgres_db:5432/myreads
SEED_DB=true
SECRET_KEY=<32+ char random>
```

Dockerfile runs `alembic upgrade head` automatically.

### 3.3 Backend Dockerfile (two-stage)
```dockerfile
# ──────────────── Stage 1 – build deps (cache-friendly) ────────────────
FROM python:3.13-slim AS builder
WORKDIR /opt/app
COPY requirements.txt .
RUN pip install --user --no-cache-dir -r requirements.txt

# ──────────────── Stage 2 – runtime ────────────────────────────────────
FROM python:3.13-slim
# 1️⃣  deterministic, non-root UID
RUN useradd -m -u 1001 myreads
WORKDIR /opt/app
ENV PYTHONUNBUFFERED=1 \
    # Allow gunicorn to pick workers = 2 × vCPU + 1
    GUNICORN_CMD_ARGS="--workers 3 --bind 0.0.0.0:8000 --log-level info"
COPY --from=builder /root/.local /root/.local
ENV PATH=/root/.local/bin:$PATH

COPY . .

# Run migrations (idempotent) then start ASGI server
CMD bash -c "alembic upgrade head && gunicorn main:app -k uvicorn.workers.UvicornWorker"

```

---

## 4. Frontend (React + Vite)
### 4.1 Local dev against **local** API
```bash
# frontend/.env
VITE_API_URL=http://127.0.0.1:8000
```
```bash
cd frontend
npm install
npm run dev
```

### 4.2 Local dev against **hosted** API
```bash
# frontend/.env
VITE_API_URL=https://myreads.automagicdeveloper.com/api/
```
```bash
cd frontend
npm install
npm run dev
```

### 4.3 Frontend Dockerfile (two-stage + micro-Nginx)
```dockerfile
# ──────────────── Stage 1 – compile SPA assets ────────────────
FROM node:20-alpine AS builder
WORKDIR /opt/web
COPY package*.json ./
RUN npm ci
COPY . .
# Runtime API endpoint baked at build-time
ARG VITE_API_URL=/api
ENV VITE_API_URL=$VITE_API_URL
RUN npm run build            # outputs to /opt/web/dist

# ──────────────── Stage 2 –   ultra-slim web server ───────────
FROM nginx:1.27-alpine
COPY --from=builder /opt/web/dist /usr/share/nginx/html
# Optional: Single-page-app history-fallback
COPY nginx.conf /etc/nginx/conf.d/default.conf
HEALTHCHECK CMD wget -qO- http://localhost || exit 1
```

`frontend/nginx.conf`
```nginx
server {
    listen 80;
    root /usr/share/nginx/html;
    location / { try_files $uri /index.html; }
}
```

---

## 5. Docker Compose
```yaml
version: "3.9"

services:
  myreads-backend:
    build: ./backend
    container_name: myreads-backend
    env_file: ./backend/.env.production
    restart: unless-stopped
    networks: [nginx_network]

  myreads-frontend:
    build:
      context: ./frontend
    container_name: myreads-frontend
    env_file: ./frontend/.env.production
    depends_on: [myreads-backend]
    restart: unless-stopped
    networks: [nginx_network]

networks:
  nginx_network:
    external: true

```

---

## 6. Nginx Reverse Proxy
```nginx
# ================================================================
# HTTPS Server Block for MyReads
# ================================================================
server {
    listen 443 ssl;
    http2 on;
    server_name myreads.automagicdeveloper.com;

    set $myreads_frontend_host myreads-frontend;
    set $myreads_backend_host myreads-backend;

    ssl_certificate /etc/nginx/certs/fullchain.pem;
    ssl_certificate_key /etc/nginx/certs/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5:!3DES;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

    # Gzip Compression
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml;
    gzip_proxied any;
    gzip_min_length 256;
    gzip_comp_level 5;
    gzip_vary on;

    # Proxy Buffering
    proxy_buffer_size          128k;
    proxy_buffers              4 256k;
    proxy_busy_buffers_size    256k;
    proxy_temp_file_write_size 256k;

    # Proxy to aistoreassistant app
    location / {
        proxy_pass http://$myreads_frontend_host:80;
        proxy_pass_request_headers on;
        proxy_set_header Authorization $http_authorization;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Port $server_port;
    }
    location /api/ {
        rewrite ^/api/(.*)$ /$1 break;
        proxy_pass http://$myreads_backend_host:8000;
        proxy_pass_request_headers on;
        proxy_set_header Authorization $http_authorization;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Port $server_port;
    }
}
```

---

## 7. API Reference

Key endpoints:  
- `POST /api/auth/signup`
- `POST /api/auth/login`
- `POST /api/auth/refresh`
- `GET /api/books`
- `PUT /api/books/{id}`
- `POST /api/books/search?query=`
- Swagger docs: `/docs`

---

## 8. Issues Faced
| Issue | Solution |
|-------|----------|
| JWT not sent | Added `proxy_set_header Authorization` |
| filter() error | Fixed Nginx rewrite stripping `/api` correctly |
| bcrypt version error | Pinned bcrypt <4.1 |

---

## 9. Reviewer Experience
```bash
# frontend/.env
VITE_API_URL=https://myreads.automagicdeveloper.com/api/
```
```bash
cd frontend
npm install
npm run dev
```
No backend or DB setup required. Book data and users are isolated.

## Contact

Mohamed AbdelGawad Ibrahim - [@m-abdelgawad](https://www.linkedin.com/in/m-abdelgawad/) - <a href="tel:+201069052620">
+201069052620</a> - muhammadabdelgawwad@gmail.com

GitHub Profile Link: [https://github.com/m-abdelgawad](https://github.com/m-abdelgawad)

<p align="right">(<a href="#readme-top">back to top</a>)</p>

--- PATH: readme_notes ---
backend:
create database
set it in .env file: DB_ENGINE & DATABASE_URL
create new venv
install requirements

migrate database:
(.venv) PS D:\Repos\myreads-full-stack-app\backend> alembic upgrade head
INFO  [alembic.runtime.migration] Context impl SQLiteImpl.
INFO  [alembic.runtime.migration] Will assume non-transactional DDL.
INFO  [alembic.runtime.migration] Running upgrade  -> a9e8c1f22eb3, create books table
INFO  [alembic.runtime.migration] Running upgrade a9e8c1f22eb3 -> 7ec848372607, init
INFO  [alembic.runtime.migration] Running upgrade 7ec848372607 -> b2d1c8f4d1a9, user_books pivot & drop shelf column
INFO  [alembic.runtime.migration] Running upgrade b2d1c8f4d1a9 -> 3a60b9e00e52, Add description field to Book model
INFO  [alembic.runtime.migration] Running upgrade 3a60b9e00e52 -> 053cac454d6a, Add description field to Book model3


D:\Repos\myreads-full-stack-app\backend\.venv\Scripts\python.exe -m uvicorn backend.main:app --reload
you can view backend at http://localhost:8000/docs
MyReads Backend
 0.1.0
OAS 3.1
/openapi.json

Authorize
auth


POST
/auth/signup
Signup

Parameters
Try it out
No parameters

Request body

application/json
Example Value
Schema
{
  "email": "user@example.com",
  "password": "string"
}
Responses
Code	Description	Links
201
Successful Response

Media type

application/json
Controls Accept header.
Example Value
Schema
{
  "id": "string",
  "email": "user@example.com"
}
No links
422
Validation Error

Media type

application/json
Example Value
Schema
{
  "detail": [
    {
      "loc": [
        "string",
        0
      ],
      "msg": "string",
      "type": "string"
    }
  ]
}
No links

POST
/auth/login
Login

Parameters
Try it out
No parameters

Request body

application/json
Example Value
Schema
{
  "email": "user@example.com",
  "password": "string"
}
Responses
Code	Description	Links
200
Successful Response

Media type

application/json
Controls Accept header.
Example Value
Schema
{
  "access_token": "string",
  "refresh_token": "string",
  "token_type": "bearer"
}
No links
422
Validation Error

Media type

application/json
Example Value
Schema
{
  "detail": [
    {
      "loc": [
        "string",
        0
      ],
      "msg": "string",
      "type": "string"
    }
  ]
}
No links

POST
/auth/refresh
Refresh

Parameters
Try it out
No parameters

Request body

application/json
Example Value
Schema
{
  "refresh_token": "string"
}
Responses
Code	Description	Links
200
Successful Response

Media type

application/json
Controls Accept header.
Example Value
Schema
{
  "access_token": "string",
  "refresh_token": "string",
  "token_type": "bearer"
}
No links
422
Validation Error

Media type

application/json
Example Value
Schema
{
  "detail": [
    {
      "loc": [
        "string",
        0
      ],
      "msg": "string",
      "type": "string"
    }
  ]
}
No links
books


GET
/books
List Books


Return all books in the database. If the current user previously moved a book to a shelf, that shelf is included; otherwise shelf=None.

Parameters
Try it out
No parameters

Responses
Code	Description	Links
200
Successful Response

Media type

application/json
Controls Accept header.
Example Value
Schema
[
  {
    "id": "string",
    "title": "string",
    "authors": [],
    "shelf": "string",
    "imageLinks": {
      "thumbnail": "string"
    },
    "description": "string"
  }
]
No links

GET
/books/{book_id}
Get Book


Parameters
Try it out
Name	Description
book_id *
string
(path)
book_id
Responses
Code	Description	Links
200
Successful Response

Media type

application/json
Controls Accept header.
Example Value
Schema
{
  "id": "string",
  "title": "string",
  "authors": [],
  "shelf": "string",
  "imageLinks": {
    "thumbnail": "string"
  },
  "description": "string"
}
No links
422
Validation Error

Media type

application/json
Example Value
Schema
{
  "detail": [
    {
      "loc": [
        "string",
        0
      ],
      "msg": "string",
      "type": "string"
    }
  ]
}
No links

PUT
/books/{book_id}
Move Book


Store or clear the user-specific shelf in pivot table.

Parameters
Try it out
Name	Description
book_id *
string
(path)
book_id
Request body

application/json
Example Value
Schema
{
  "shelf": "string"
}
Responses
Code	Description	Links
200
Successful Response

Media type

application/json
Controls Accept header.
Example Value
Schema
{
  "id": "string",
  "title": "string",
  "authors": [],
  "shelf": "string",
  "imageLinks": {
    "thumbnail": "string"
  },
  "description": "string"
}
No links
422
Validation Error

Media type

application/json
Example Value
Schema
{
  "detail": [
    {
      "loc": [
        "string",
        0
      ],
      "msg": "string",
      "type": "string"
    }
  ]
}
No links

POST
/books/search
Search


Parameters
Try it out
Name	Description
query *
string
(query)
query
maxResults
integer
(query)
Default value : 20

20
Responses
Code	Description	Links
200
Successful Response

Media type

application/json
Controls Accept header.
Example Value
Schema
[
  {
    "id": "string",
    "title": "string",
    "authors": [],
    "shelf": "string",
    "imageLinks": {
      "thumbnail": "string"
    },
    "description": "string"
  }
]
No links
422
Validation Error

Media type

application/json
Example Value
Schema
{
  "detail": [
    {
      "loc": [
        "string",
        0
      ],
      "msg": "string",
      "type": "string"
    }
  ]
}
No links
default


GET
/
Root

Parameters
Cancel
No parameters

Execute
Clear
Responses
Curl

curl -X 'GET' \
  'http://127.0.0.1:8000/' \
  -H 'accept: application/json'
Request URL
http://127.0.0.1:8000/
Server response
Code	Details
200
Response body
Download
{
  "status": "running"
}
Response headers
 content-length: 20
 content-type: application/json
 date: Sat,14 Jun 2025 22:26:17 GMT
 server: uvicorn
Responses
Code	Description	Links
200
Successful Response

Media type

application/json
Controls Accept header.
Example Value
Schema
"string"
No links

Schemas
BookCollapse allobject
idstring
titlestring
authorsExpand all(array<string> | null)
shelfExpand all(string | null)
imageLinksExpand all(object | null)
descriptionExpand all(string | null)
HTTPValidationErrorCollapse allobject
detailCollapse allarray<object>
ItemsExpand allobject
ImageLinksCollapse allobject
thumbnailCollapse all(string | null)
Any ofExpand all(string | null)
ShelfUpdateCollapse allobject
shelfCollapse all(string | null)
Any ofExpand all(string | null)
TokenCollapse allobject
access_tokenstring
refresh_tokenstring
token_typeExpand allstring
TokenRefreshCollapse allobject
refresh_tokenstring
UserCreateCollapse allobject
emailstringemail
passwordstring
UserOutCollapse allobject
idstring
emailstringemail
ValidationErrorCollapse allobject
locExpand allarray<(string | integer)>
msgstring
typestring
------------------------------------------------
Frontend:
"C:\Program Files\nodejs\npm.cmd" run dev

> frontend@0.0.0 dev
> vite

1:27:37 AM [vite] (client) Re-optimizing dependencies because vite config has changed
Port 5173 is in use, trying another one...

  VITE v6.3.5  ready in 455 ms

  ➜  Local:   http://localhost:5174/
  ➜  Network: use --host to expose
  ➜  press h + enter to show help
then signup and login.
-----------------------------------------------------
You can also power up the frontend and backend using docker-compose:
docker-compose up --build
but prepare database first as described above.
# This will build and run both the frontend and backend services
---------------------------------------------------------------------
The app uses a hosted backend at https://myreads.automagicdeveloper.com/api

Reviewers can sign up with any email + password

No backend setup required — only npm install && npm start for frontend
💡 The backend is already hosted and configured — no setup required.
Sign up or log in directly at runtime.
All book data is live and per-user.
---------------------------------------------
Explain dockerfile for frontend and backend.
Explain the nginx.conf in the frontend.
Explain the block I created in the cerntral nginx.conf to proxy requests to the full stack:
# ================================================================
server {
    listen 443 ssl;
    http2 on;
    server_name myreads.automagicdeveloper.com;

    set $myreads_frontend_host myreads-frontend;
    set $myreads_backend_host myreads-backend;

    ssl_certificate /etc/nginx/certs/fullchain.pem;
    ssl_certificate_key /etc/nginx/certs/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5:!3DES;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

    # Gzip Compression
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml;
    gzip_proxied any;
    gzip_min_length 256;
    gzip_comp_level 5;
    gzip_vary on;

    # Proxy Buffering
    proxy_buffer_size          128k;
    proxy_buffers              4 256k;
    proxy_busy_buffers_size    256k;
    proxy_temp_file_write_size 256k;

    # Proxy to aistoreassistant app
    location / {
        proxy_pass http://$myreads_frontend_host:80;
        proxy_pass_request_headers on;
        proxy_set_header Authorization $http_authorization;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Port $server_port;
    }
    location /api/ {
        rewrite ^/api/(.*)$ /$1 break;
        proxy_pass http://$myreads_backend_host:8000;
        proxy_pass_request_headers on;
        proxy_set_header Authorization $http_authorization;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Port $server_port;
    }
}

--- PATH: backend\.env ---
DB_ENGINE=sqlite
DATABASE_URL=sqlite:///./myreads.db

SEED_DB=true

SECRET_KEY=gfttLnbzlZw6scBWQNUZ43c35SzLe8yjZgP0PzuZasSby41NX5
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=15
REFRESH_TOKEN_EXPIRE_DAYS=30

--- PATH: backend\.env.production ---
# ───── Database ─────
DB_ENGINE=postgres
DATABASE_URL=postgresql+psycopg2://dbuser:s7Fj9pjfoe1PqPkm@postgres_db:5432/myreads

# ───── Application Settings ─────
SECRET_KEY=gfttLnbzlZw6scBWQNUZ43c35SzLe8yjZgP0PzuZasSby41NX5
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=15
REFRESH_TOKEN_EXPIRE_DAYS=30

# ───── Optional Seed Toggle ─────
SEED_DB=true

--- PATH: backend\alembic.ini ---
# A generic, single database configuration.

[alembic]
# path to migration scripts.
# this is typically a path given in POSIX (e.g. forward slashes)
# format, relative to the token %(here)s which refers to the location of this
# ini file
script_location = %(here)s/alembic

# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s
# Uncomment the line below if you want the files to be prepended with date and time
# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file
# for all available tokens
# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s

# sys.path path, will be prepended to sys.path if present.
# defaults to the current working directory.  for multiple paths, the path separator
# is defined by "path_separator" below.
prepend_sys_path = .


# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires the python>=3.9 or backports.zoneinfo library and tzdata library.
# Any required deps can installed by adding `alembic[tz]` to the pip requirements
# string value is passed to ZoneInfo()
# leave blank for localtime
# timezone =

# max length of characters to apply to the "slug" field
# truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false

# version location specification; This defaults
# to <script_location>/versions.  When using multiple version
# directories, initial revisions must be specified with --version-path.
# The path separator used here should be the separator specified by "path_separator"
# below.
# version_locations = %(here)s/bar:%(here)s/bat:%(here)s/alembic/versions

# path_separator; This indicates what character is used to split lists of file
# paths, including version_locations and prepend_sys_path within configparser
# files such as alembic.ini.
# The default rendered in new alembic.ini files is "os", which uses os.pathsep
# to provide os-dependent path splitting.
#
# Note that in order to support legacy alembic.ini files, this default does NOT
# take place if path_separator is not present in alembic.ini.  If this
# option is omitted entirely, fallback logic is as follows:
#
# 1. Parsing of the version_locations option falls back to using the legacy
#    "version_path_separator" key, which if absent then falls back to the legacy
#    behavior of splitting on spaces and/or commas.
# 2. Parsing of the prepend_sys_path option falls back to the legacy
#    behavior of splitting on spaces, commas, or colons.
#
# Valid values for path_separator are:
#
# path_separator = :
# path_separator = ;
# path_separator = space
# path_separator = newline
#
# Use os.pathsep. Default configuration used for new projects.
path_separator = os

# set to 'true' to search source files recursively
# in each "version_locations" directory
# new in Alembic version 1.10
# recursive_version_locations = false

# the output encoding used when revision files
# are written from script.py.mako
# output_encoding = utf-8

# database URL.  This is consumed by the user-maintained env.py script only.
# other means of configuring database URLs may be customized within the env.py
# file.
sqlalchemy.url = driver://user:pass@localhost/dbname


[post_write_hooks]
# post_write_hooks defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples

# format using "black" - use the console_scripts runner, against the "black" entrypoint
# hooks = black
# black.type = console_scripts
# black.entrypoint = black
# black.options = -l 79 REVISION_SCRIPT_FILENAME

# lint with attempts to fix using "ruff" - use the exec runner, execute a binary
# hooks = ruff
# ruff.type = exec
# ruff.executable = %(here)s/.venv/bin/ruff
# ruff.options = check --fix REVISION_SCRIPT_FILENAME

# Logging configuration.  This is also consumed by the user-maintained
# env.py script only.
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARNING
handlers = console
qualname =

[logger_sqlalchemy]
level = WARNING
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S

--- PATH: backend\config.py ---
from pathlib import Path
from pydantic_settings import BaseSettings, SettingsConfigDict
BASE_DIR = Path(__file__).resolve().parent
class Settings(BaseSettings):
    DB_ENGINE: str = "sqlite"
    DATABASE_URL: str
    SEED_DB: bool = True
    SECRET_KEY: str
    ALGORITHM: str = "HS256"
    ACCESS_TOKEN_EXPIRE_MINUTES: int = 15
    REFRESH_TOKEN_EXPIRE_DAYS: int = 7
    model_config = SettingsConfigDict(
        env_file=".env",
        env_file_encoding="utf-8",
    )
settings = Settings()

--- PATH: backend\database.py ---
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, declarative_base
from config import settings
extra = {"check_same_thread": False} if settings.DATABASE_URL.startswith("sqlite") else {}
engine = create_engine(settings.DATABASE_URL, connect_args=extra)
SessionLocal = sessionmaker(bind=engine, autocommit=False, autoflush=False)
Base = declarative_base()

--- PATH: backend\Dockerfile ---
# ──────────────── Stage 1 – build deps (cache-friendly) ────────────────
FROM python:3.13-slim AS builder
WORKDIR /opt/app
COPY requirements.txt .
RUN pip install --user --no-cache-dir -r requirements.txt

# ──────────────── Stage 2 – runtime ────────────────────────────────────
FROM python:3.13-slim
# 1️⃣  deterministic, non-root UID
RUN useradd -m -u 1001 myreads
WORKDIR /opt/app
ENV PYTHONUNBUFFERED=1 \
    # Allow gunicorn to pick workers = 2 × vCPU + 1
    GUNICORN_CMD_ARGS="--workers 3 --bind 0.0.0.0:8000 --log-level info"
COPY --from=builder /root/.local /root/.local
ENV PATH=/root/.local/bin:$PATH

COPY . .

# Run migrations (idempotent) then start ASGI server
CMD bash -c "alembic upgrade head && gunicorn main:app -k uvicorn.workers.UvicornWorker"

--- PATH: backend\main.py ---
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from config import settings
from utils.seeder import seed_books
from routers import auth, books
if settings.SEED_DB:
    seed_books()
app = FastAPI(title="MyReads Backend")
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
app.include_router(auth.router)
app.include_router(books.router)
@app.get("/")
def root():
    return {"status": "running"}

--- PATH: backend\README.md ---
# MyReads Full-Stack Demo (FastAPI + JWT + React)

A complete re-implementation of Udacity’s **MyReads** Bookshelf app backend.  
You’ll learn:

* FastAPI fundamentals (routing, dependency injection, Pydantic v2)
* SQLAlchemy + Alembic (SQLite dev, Postgres prod)
* Secure JWT authentication (access / refresh tokens)
* Building a clean, layered project structure
* Automatic Swagger / OpenAPI docs

When you finish reading, you should be able to rebuild every line from scratch.

---

## 📁 Folder Structure (top level)

Path | Purpose
---- | -------
`main.py` | FastAPI application factory, wires routers & middleware.
`config.py` | Loads `.env` via pydantic-settings. Centralised config.
`database.py` | SQLAlchemy engine/session + Base.
`alembic/` | DB migrations; `env.py` dynamically injects DB URL.
`models/` | SQLAlchemy ORM tables.<br>  `book.py`, `user.py`, `__init__.py`.
`schemas/` | Pydantic v2 DTOs (request / response models).
`core/` | Cross-cutting concerns: security & dependencies.
`routers/` | Feature-oriented route groups (`auth.py`, `books.py`).
`utils/seeder.py` | One-shot JSON → DB importer.
`data/mock_books.json` | Udacity starter data (exact schema).

---

## 🔧 Step-by-Step Setup

1. **Clone / create venv**

       python -m venv venv
       source venv/bin/activate  (Windows: venv\Scripts\activate)

2. **Install deps**

       pip install -r requirements.txt

3. **Configure `.env`**

       DB_ENGINE=sqlite
       DATABASE_URL=sqlite:///./myreads.db
       SECRET_KEY=replace_with_32+_chars
       SEED_DB=true

   Flip `DB_ENGINE` and `DATABASE_URL` for Postgres later.

4. **Run migrations**

       alembic revision --autogenerate -m "init"
       alembic upgrade head

5. **Seed books (optional)**  
   `utils/seeder.py` reads `mock_books.json` if `SEED_DB=true`.

6. **Launch dev server**

       uvicorn main:app --reload

7. **Open docs**

       http://localhost:8000/docs  
       Use **/auth/signup** → **/auth/login** to generate an access token, click **Authorize**, paste token. All `/books/*` routes become callable.

---

## 🗄  Database Layer

### `database.py`

* Builds `engine` from `config.DATABASE_URL`.
* Creates `SessionLocal` factory (`autocommit=False`, `autoflush=False`).
* Exposes declarative `Base` used by every model.

### `models/book.py`
```
class Book(Base):
tablename = "books"
id = Column(String, primary_key=True)
title = Column(String, nullable=False)
authors = Column(String) # CSV
shelf = Column(String) # wantToRead | currentlyReading | read
thumbnail = Column(String) # URL
```


### `models/user.py`

* Stores **hashed** passwords (`passlib[bcrypt]`).
* `is_active` flag lets you soft-deactivate accounts.

`models/__init__.py` imports both tables so `Base.metadata` sees them for Alembic autogeneration.

---

## 📝  Configuration

### `config.py`

* Powered by **pydantic-settings**.  
  Each `.env` key becomes a typed attribute.

```angular2html
settings.DATABASE_URL
settings.SECRET_KEY
settings.ACCESS_TOKEN_EXPIRE_MINUTES
settings.SEED_DB
```


### Switching databases

*Dev* → SQLite  
*Prod* → Postgres

```angular2html
DB_ENGINE=postgres
DATABASE_URL=postgresql+psycopg2://user:pass@db/myreads
```

No code changes required.

---

## 🔐  Security Layer

### `core/security.py`

Function | Role
-------- | ----
`hash_password()` / `verify_password()` | Bcrypt hashing.
`create_access_token()` | Short-lived (default 15 min).
`create_refresh_token()` | Long-lived (default 7 days).
`decode_token()` | Returns `user_id` or `None`.

Internally uses **python-jose** with `HS256` and `settings.SECRET_KEY`.

### `core/dependencies.py`

Dependency | What it injects
---------- | ---------------
`get_db()` | SQLAlchemy session per request (closes automatically).
`get_current_user()` | Validates `Authorization: Bearer <JWT>` header and returns `models.user.User`.

`bearer_scheme = HTTPBearer(...)` tells FastAPI to add a **single JWT field** in Swagger’s Authorize popup.

---

## 🌐  Router Layer

### `/auth`  (`routers/auth.py`)

Method | Purpose | Body model
------ | ------- | ----------
`POST /auth/signup` | Create user | `schemas.user.UserCreate`
`POST /auth/login` | Return access + refresh JWT | `UserCreate`
`POST /auth/refresh` | Refresh tokens | raw string refresh_token

All return `schemas.user.UserOut` or `schemas.token.Token`.

### `/books`  (`routers/books.py`)

*Entire router protected*:   `dependencies=[Security(get_current_user)]`

Endpoint | Purpose | Notes
-------- | ------- | -----
`GET /books/` | List all books |
`GET /books/{id}` | Single book |
`PUT /books/{id}?shelf=x` | Change shelf (exactly like Udacity `update`) |
`POST /books/search` | Body :`query`, `maxResults` → fuzzy title/author search |

Helper `orm_to_schema()` converts `models.book.Book` → `schemas.book.Book` (Pydantic).

---

## ♻️  Seeder

`utils/seeder.py`

* Reads `data/mock_books.json` (`{ "books": [...] }`)
* Skips rows already in DB (`id` duplication check)
* Enabled once via `SEED_DB=true`

After the first successful import, set `SEED_DB=false` to boot faster.

---

## 🏗  How Everything Connects

1. **FastAPI** starts → `main.py` imports routers.
2. Each request:
   * **Middleware** attaches CORS headers.
   * `get_current_user` (via HTTP bearer) decodes JWT → queries DB.
   * `get_db` gives a unit-of-work session to route handler.
3. Route returns a **Pydantic schema** → FastAPI serialises to JSON.
4. Swagger UI auto-builds OpenAPI 3.0 from routes, models & security schemes.

---

## 🚦  Re-Develop Checklist

Re-implement from scratch by repeating these milestones:

1. Create venv, install FastAPI, SQLAlchemy, Alembic.  
2. Design `.env` + `config.py`.  
3. Build `database.py` and verify `Base.metadata` empty.  
4. Create `models.book.Book` → autogenerate migration.  
5. Build `schemas.book` Pydantic mirror.  
6. Wire `routers/books.py` (no auth yet) → test `/docs`.  
7. Add `models.user.User`, `core/security.py`, `core/dependencies.py`.  
8. Implement `/auth` router, hash + JWT.  
9. Switch `/books` router to `dependencies=[Security(get_current_user)]`.  
10. Build React front-end (Vite) pointing to `.env VITE_API_URL`.  
11. Flip to Postgres, run Alembic `upgrade head`, deploy 🚀.

---

## 🗃  Reference: Complete API List

Verb | URL | Body | Auth? | Mirrors Udacity
---- | --- | ---- | ----- | ---------------
GET | `/books/` | — | ✔︎ access | `getAll`
GET | `/books/{id}` | — | ✔︎ access | `get`
PUT | `/books/{id}?shelf=wantToRead` | — | ✔︎ access | `update`
POST | `/books/search` | query, maxResults | ✔︎ access | `search`
POST | `/auth/signup` | email, password | ✘ | —
POST | `/auth/login` | email, password | ✘ | —
POST | `/auth/refresh` | refresh_token | ✘ | —

---

## 🧑‍💻  Next Ideas for Practice

* Store `authors` in a separate `book_authors` table (1-N).
* Issue HttpOnly cookie for refresh token instead of JSON payload.
* Add pagination to `/books/`.
* Write PyTest integration tests with FastAPI’s TestClient.
* Dockerise Postgres + backend; deploy to Render, Railway, or Fly.io.

Happy coding – build it, break it, rebuild it!

--- PATH: backend\requirements.txt ---
[UNREADABLE]

--- PATH: backend\alembic\env.py ---
import os, sys
from logging.config import fileConfig
from sqlalchemy import engine_from_config, pool
from alembic import context
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
from config import settings
import models
from database import Base
config = context.config
config.set_main_option("sqlalchemy.url", settings.DATABASE_URL)
if config.config_file_name is not None:
    fileConfig(config.config_file_name)
target_metadata = Base.metadata
def run_migrations_offline() -> None:
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
    )
    with context.begin_transaction():
        context.run_migrations()
def run_migrations_online() -> None:
    connectable = engine_from_config(
        config.get_section(config.config_ini_section, {}),
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )
    with connectable.connect() as connection:
        context.configure(
            connection=connection, target_metadata=target_metadata
        )
        with context.begin_transaction():
            context.run_migrations()
if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()

--- PATH: backend\alembic\README ---
Generic single-database configuration.

--- PATH: backend\alembic\script.py.mako ---
"""${message}

Revision ID: ${up_revision}
Revises: ${down_revision | comma,n}
Create Date: ${create_date}

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
${imports if imports else ""}

# revision identifiers, used by Alembic.
revision: str = ${repr(up_revision)}
down_revision: Union[str, None] = ${repr(down_revision)}
branch_labels: Union[str, Sequence[str], None] = ${repr(branch_labels)}
depends_on: Union[str, Sequence[str], None] = ${repr(depends_on)}


def upgrade() -> None:
    """Upgrade schema."""
    ${upgrades if upgrades else "pass"}


def downgrade() -> None:
    """Downgrade schema."""
    ${downgrades if downgrades else "pass"}

--- PATH: backend\alembic\versions\053cac454d6a_add_description_field_to_book_model3.py ---
from typing import Sequence, Union
from alembic import op
import sqlalchemy as sa
revision: str = '053cac454d6a'
down_revision: Union[str, None] = '3a60b9e00e52'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None
def upgrade() -> None:
    pass
def downgrade() -> None:
    pass

--- PATH: backend\alembic\versions\3a60b9e00e52_add_description_field_to_book_model.py ---
from typing import Sequence, Union
from alembic import op
import sqlalchemy as sa
revision: str = '3a60b9e00e52'
down_revision: Union[str, None] = 'b2d1c8f4d1a9'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None
def upgrade() -> None:
    op.add_column('books', sa.Column('description', sa.Text(), nullable=True))
    op.create_index(op.f('ix_user_books_id'), 'user_books', ['id'], unique=False)
def downgrade() -> None:
    op.drop_index(op.f('ix_user_books_id'), table_name='user_books')
    op.drop_column('books', 'description')

--- PATH: backend\alembic\versions\7ec848372607_init.py ---
from typing import Sequence, Union
from alembic import op
import sqlalchemy as sa
revision: str = '7ec848372607'
down_revision: Union[str, None] = 'a9e8c1f22eb3'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None
def upgrade() -> None:
    op.create_table('users',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('hashed_pw', sa.String(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
def downgrade() -> None:
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')

--- PATH: backend\alembic\versions\a9e8c1f22eb3_create_books_table.py ---
from typing import Sequence, Union
from alembic import op
import sqlalchemy as sa
revision: str = 'a9e8c1f22eb3'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None
def upgrade() -> None:
    op.create_table('books',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('authors', sa.String(), nullable=True),
    sa.Column('shelf', sa.String(), nullable=True),
    sa.Column('thumbnail', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_books_id'), 'books', ['id'], unique=False)
def downgrade() -> None:
    op.drop_index(op.f('ix_books_id'), table_name='books')
    op.drop_table('books')

--- PATH: backend\alembic\versions\dbadf1122f88_user_books_pivot_drop_shelf_column.py ---
from alembic import op
import sqlalchemy as sa
revision = "b2d1c8f4d1a9"
down_revision = "7ec848372607"
branch_labels = None
depends_on = None
def upgrade() -> None:
    op.create_table(
        "user_books",
        sa.Column("id", sa.Integer(), primary_key=True),
        sa.Column("user_id", sa.String(), sa.ForeignKey("users.id", ondelete="CASCADE"), nullable=False),
        sa.Column("book_id", sa.String(), sa.ForeignKey("books.id", ondelete="CASCADE"), nullable=False),
        sa.Column("shelf", sa.String(), nullable=False),
        sa.UniqueConstraint("user_id", "book_id", name="uq_user_book"),
    )
    with op.batch_alter_table("books") as batch_op:
        batch_op.drop_column("shelf")
def downgrade() -> None:
    with op.batch_alter_table("books") as batch_op:
        batch_op.add_column(sa.Column("shelf", sa.String(), nullable=True))
    op.drop_table("user_books")

--- PATH: backend\core\dependencies.py ---
from fastapi import Depends, HTTPException, Security, status
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from sqlalchemy.orm import Session
from database import SessionLocal
from models.user import User
from core.security import decode_token
bearer_scheme = HTTPBearer(bearerFormat="JWT", description="Paste access token")
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()
def get_current_user(
    creds: HTTPAuthorizationCredentials = Security(bearer_scheme),
    db: Session = Depends(get_db),
) -> User:
    token = creds.credentials
    user_id = decode_token(token)
    if not user_id:
        raise HTTPException(status_code=401, detail="Invalid or expired token")
    user = db.query(User).filter(User.id == user_id).first()
    if not user or not user.is_active:
        raise HTTPException(status_code=401, detail="User not found / inactive")
    return user

--- PATH: backend\core\security.py ---
from datetime import datetime, timedelta, timezone
from uuid import uuid4
from typing import Any
from jose import jwt, JWTError
from passlib.context import CryptContext
from config import settings
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
def create_uuid() -> str:
    return str(uuid4())
def hash_password(password: str) -> str:
    return pwd_context.hash(password)
def verify_password(password: str, hashed_password: str) -> bool:
    return pwd_context.verify(password, hashed_password)
def _create_token(*, subject: str, expires_delta: timedelta) -> str:
    payload: dict[str, Any] = {
        "sub": subject,
        "exp": datetime.now(timezone.utc) + expires_delta,
        "iat": datetime.now(timezone.utc),
    }
    return jwt.encode(payload, settings.SECRET_KEY, algorithm=settings.ALGORITHM)
def create_access_token(user_id: str) -> str:
    return _create_token(
        subject=user_id,
        expires_delta=timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES),
    )
def create_refresh_token(user_id: str) -> str:
    return _create_token(
        subject=user_id,
        expires_delta=timedelta(days=settings.REFRESH_TOKEN_EXPIRE_DAYS),
    )
def decode_token(token: str) -> str | None:
    try:
        payload = jwt.decode(token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM])
        return payload.get("sub")
    except JWTError:
        return None

--- PATH: backend\models\book.py ---
from sqlalchemy import Column, String, Text
from database import Base
class Book(Base):
    __tablename__ = "books"
    id          = Column(String, primary_key=True, index=True)
    title       = Column(String, nullable=False)
    authors     = Column(String)
    thumbnail   = Column(String)
    description = Column(Text)

--- PATH: backend\models\bookshelf.py ---
from sqlalchemy import Column, Integer, ForeignKey, String, UniqueConstraint
from database import Base
class UserBookShelf(Base):
    __tablename__ = "user_books"
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(ForeignKey("users.id", ondelete="CASCADE"), nullable=False)
    book_id = Column(ForeignKey("books.id", ondelete="CASCADE"), nullable=False)
    shelf = Column(String, nullable=False)
    __table_args__ = (UniqueConstraint("user_id", "book_id", name="uq_user_book"),)

--- PATH: backend\models\user.py ---
from sqlalchemy import Column, String, Boolean, DateTime
from sqlalchemy.sql import func
from database import Base
class User(Base):
    __tablename__ = "users"
    id         = Column(String, primary_key=True, index=True)
    email      = Column(String, unique=True, index=True, nullable=False)
    hashed_pw  = Column(String, nullable=False)
    is_active  = Column(Boolean, default=True)
    created_at = Column(DateTime(timezone=True), server_default=func.now())
__all__ = ["User"]

--- PATH: backend\models\__init__.py ---
from .book import Book
from .user import User
from .bookshelf import UserBookShelf
__all__: list[str] = ["Book", "User", "UserBookShelf"]

--- PATH: backend\routers\auth.py ---
from uuid import uuid4
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from core.dependencies import get_db
from core.security import (
    hash_password,
    verify_password,
    create_access_token,
    create_refresh_token,
    decode_token,
)
from models.user import User
from schemas.user import UserCreate, UserOut
from schemas.token import Token, TokenRefresh
router = APIRouter(prefix="/auth", tags=["auth"])
@router.post("/signup", response_model=UserOut, status_code=201)
def signup(payload: UserCreate, db: Session = Depends(get_db)):
    if db.query(User).filter(User.email == payload.email).first():
        raise HTTPException(400, "Email already registered")
    user = User(
        id=str(uuid4()),
        email=payload.email,
        hashed_pw=hash_password(payload.password),
    )
    db.add(user)
    db.commit()
    db.refresh(user)
    return user
@router.post("/login", response_model=Token)
def login(payload: UserCreate, db: Session = Depends(get_db)):
    user = db.query(User).filter(User.email == payload.email).first()
    if not user or not verify_password(payload.password, user.hashed_pw):
        raise HTTPException(status_code=401, detail="Incorrect email or password")
    return Token(
        access_token=create_access_token(user.id),
        refresh_token=create_refresh_token(user.id),
    )
@router.post("/refresh", response_model=Token)
def refresh(payload: TokenRefresh, db: Session = Depends(get_db)):
    user_id = decode_token(payload.refresh_token)
    if not user_id:
        raise HTTPException(status_code=401, detail="Invalid refresh token")
    user = db.query(User).filter(User.id == user_id).first()
    if not user:
        raise HTTPException(status_code=401, detail="User not found")
    return Token(
        access_token=create_access_token(user.id),
        refresh_token=create_refresh_token(user.id),
    )

--- PATH: backend\routers\books.py ---
from typing import List, Optional
from fastapi import APIRouter, Depends, HTTPException, Security
from sqlalchemy.orm import Session
from pydantic import BaseModel, Field
from core.dependencies import get_db, get_current_user
from models.book import Book as BookORM
from models.bookshelf import UserBookShelf as Pivot
from models.user import User
from schemas.book import Book, ImageLinks
class ShelfUpdate(BaseModel):
    shelf: Optional[str] = None
router = APIRouter(
    prefix="/books",
    tags=["books"],
    dependencies=[Security(get_current_user)],
)
def to_schema(book: BookORM, shelf: str | None = None) -> Book:
    img = ImageLinks(thumbnail=book.thumbnail) if book.thumbnail else None
    authors = book.authors.split(", ") if book.authors else []
    return Book(
        id=book.id,
        title=book.title,
        authors=authors,
        shelf=shelf,
        imageLinks=img,
        description=book.description,
    )
def _shelf_for(user_id: str, book_id: str, db: Session) -> str | None:
    row = db.query(Pivot.shelf).filter_by(user_id=user_id, book_id=book_id).first()
    return row[0] if row else None
@router.get("", response_model=List[Book])
def list_books(
    db: Session = Depends(get_db),
    user: User = Security(get_current_user),
):
    books = db.query(BookORM).all()
    return [to_schema(b, _shelf_for(user.id, b.id, db)) for b in books]
@router.get("/{book_id}", response_model=Book)
def get_book(
    book_id: str,
    db: Session = Depends(get_db),
    user: User = Security(get_current_user),
):
    book = db.query(BookORM).filter(BookORM.id == book_id).first()
    if not book:
        raise HTTPException(404, "Book not found")
    shelf = _shelf_for(user.id, book_id, db)
    return to_schema(book, shelf)
@router.put("/{book_id}", response_model=Book)
def move_book(
    book_id: str,
    payload: ShelfUpdate,
    db: Session = Depends(get_db),
    user: User = Security(get_current_user),
):
    if payload.shelf not in {"currentlyReading", "wantToRead", "read", "null", ""} and payload.shelf is not None:
        raise HTTPException(400, "Invalid shelf value")
    pivot = db.query(Pivot).filter_by(user_id=user.id, book_id=book_id).first()
    if payload.shelf == "null" or payload.shelf == "" or payload.shelf is None:
        if pivot:
            db.delete(pivot)
            db.commit()
        return to_schema(db.query(BookORM).filter(BookORM.id == book_id).first())
    if not pivot:
        pivot = Pivot(user_id=user.id, book_id=book_id, shelf=payload.shelf)
        db.add(pivot)
    else:
        pivot.shelf = payload.shelf
    db.commit()
    return to_schema(db.query(BookORM).filter(BookORM.id == book_id).first())
@router.post("/search", response_model=List[Book])
def search(
    query: str,
    maxResults: int = 20,
    db: Session = Depends(get_db),
    user: User = Security(get_current_user),
):
    q = f"%{query.lower()}%"
    hits = (
        db.query(BookORM)
        .filter((BookORM.title.ilike(q)) | (BookORM.authors.ilike(q)))
        .limit(maxResults)
        .all()
    )
    return [to_schema(b, _shelf_for(user.id, b.id, db)) for b in hits]

--- PATH: backend\schemas\book.py ---
from typing import List, Optional
from pydantic import BaseModel
class ImageLinks(BaseModel):
    thumbnail: Optional[str] = None
class Book(BaseModel):
    id: str
    title: str
    authors: Optional[List[str]] = []
    shelf: Optional[str] = None
    imageLinks: Optional[ImageLinks] = None
    description: Optional[str] = None

--- PATH: backend\schemas\token.py ---
from pydantic import BaseModel
class Token(BaseModel):
    access_token: str
    refresh_token: str
    token_type: str = "bearer"
class TokenRefresh(BaseModel):
    refresh_token: str

--- PATH: backend\schemas\user.py ---
from pydantic import BaseModel, EmailStr
class UserCreate(BaseModel):
    email: EmailStr
    password: str
class UserOut(BaseModel):
    id: str
    email: EmailStr
    class Config:
        from_attributes = True

--- PATH: backend\schemas\__init__.py ---


--- PATH: backend\utils\seeder.py ---
from pathlib import Path
import json
from sqlalchemy.orm import Session
from database import SessionLocal
from models.book import Book as BookORM
def seed_books() -> None:
    data_path = Path(__file__).resolve().parent.parent / "data" / "mock_books.json"
    if not data_path.exists():
        print("❌ mock_books.json not found, skipping seed.")
        return
    with data_path.open("r", encoding="utf-8") as f:
        books_raw = json.load(f)["books"]
    db: Session = SessionLocal()
    inserted = 0
    updated = 0
    for b in books_raw:
        book = db.query(BookORM).filter(BookORM.id == b["id"]).first()
        desc = b.get("description", "")
        if not book:
            db.add(
                BookORM(
                    id=b["id"],
                    title=b["title"],
                    authors=", ".join(b.get("authors", [])),
                    thumbnail=b.get("imageLinks", {}).get("thumbnail", ""),
                    description=desc,
                )
            )
            inserted += 1
        else:
            if book.description != desc:
                book.description = desc
                updated += 1
    db.commit()
    db.close()
    msg = f"Seeded {inserted} new books." if inserted else "ℹ️  No new books to seed."
    if updated:
        msg += f" Updated description for {updated} existing books."
    print(msg)

--- PATH: frontend\.env ---
#VITE_API_URL=http://127.0.0.1:8000
VITE_API_URL=https://myreads.automagicdeveloper.com/api/

--- PATH: frontend\.env.production ---
VITE_API_URL=/api

--- PATH: frontend\.gitignore ---
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

--- PATH: frontend\Dockerfile ---
# ──────────────── Stage 1 – compile SPA assets ────────────────
FROM node:20-alpine AS builder
WORKDIR /opt/web
COPY package*.json ./
RUN npm ci
COPY . .
# Runtime API endpoint baked at build-time
ARG VITE_API_URL=/api
ENV VITE_API_URL=$VITE_API_URL
RUN npm run build            # outputs to /opt/web/dist

# ──────────────── Stage 2 –   ultra-slim web server ───────────
FROM nginx:1.27-alpine
COPY --from=builder /opt/web/dist /usr/share/nginx/html
# Optional: Single-page-app history-fallback
COPY nginx.conf /etc/nginx/conf.d/default.conf
HEALTHCHECK CMD wget -qO- http://localhost || exit 1

--- PATH: frontend\eslint.config.js ---
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...reactHooks.configs.recommended.rules,
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]

--- PATH: frontend\index.html ---
<!--
  This is the main HTML file for the frontend of the BookShelf application.
  It sets up the basic structure of the webpage and includes the root element
  where the React application will be mounted.
-->

<!doctype html>
<html lang="en">
<head>
  <!-- Specifies the character encoding for the document -->
  <meta charset="UTF-8" />

  <!-- Links the favicon for the webpage -->
  <link rel="icon" type="image/svg+xml" href="/vite.svg" />

  <!-- Sets the viewport for responsive design -->
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />

  <!-- Defines the title of the webpage -->
  <title>BookShelf</title>
</head>
<body>
<!-- Root element where the React application will be rendered -->
<div id="root"></div>

<!-- Includes the main JavaScript file to bootstrap the React application -->
<script type="module" src="/src/main.jsx"></script>
</body>
</html>

--- PATH: frontend\nginx.conf ---
server {
    listen 80;
    root /usr/share/nginx/html;

    location / {
        try_files $uri /index.html;   # no second $uri/, prevents loop
    }
}

--- PATH: frontend\README.md ---
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend using TypeScript with type-aware lint rules enabled. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) for information on how to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.

--- PATH: frontend\vite.config.js ---
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})

--- PATH: frontend\webstorm_configs.jpg ---
[UNREADABLE]

--- PATH: frontend\public\vite.svg ---
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

--- PATH: frontend\src\AppLayout.jsx ---
// Shared layout: Navbar, Footer, Floating plus icon
/**
 * Imports the `Outlet` component from `react-router-dom`.
 *
 * The `Outlet` component is used as a placeholder for rendering child routes
 * defined in the routing configuration. It allows nested routes to be displayed
 * within the parent component.
 */
import { Outlet } from "react-router-dom";
import ScrollToTop from './components/common/ScrollToTop.jsx';
import { Link, useNavigate } from "react-router-dom";
import {useAuth} from "./context/AuthContext.jsx";

/**
 * Defines the shared layout for the application, including the Navbar, Footer,
 * and a floating button for adding books. It also uses the `Outlet` component
 * to render child routes dynamically.
 */
function AppLayout() {

    // Access the authentication context to check if user is already authenticated
    const { isAuthenticated, logout } = useAuth();
    const navigate = useNavigate(); // Hook to programmatically navigate between routes

    function handleLogout() {
        logout(); // Call the logout function from AuthContext
        navigate('/login'); // Redirect to the login page after logout
    }

    return (
        // That’s called a fragment. It’s a special shorthand in React that means:
        // “Return multiple elements without wrapping them in an extra <div>.”
        // It’s often used in layouts like AppLayout to avoid unnecessary HTML nesting.
        <>
            {/* Scroll to top on route change */}
            <ScrollToTop />

            <nav className="navbar">
                <div className="nav-content">
                    <a className="nav-title" href="/">
                        <span className="logo-text">BookShelf</span>
                    </a> {/* Link to the homepage */}

                    <div className="nav-links">
                        {isAuthenticated ? (
                            <>
                                <a className="nav-home-btn" href="/">Home</a>
                                <a
                                    className="nav-auth-btn"
                                    href="#"
                                    onClick={(e) => {
                                        e.preventDefault();
                                        handleLogout();
                                    }}
                                >
                                    Logout
                                </a>
                            </>
                        ) : (
                            <a className="nav-auth-btn" href="/login">Login</a>
                        )}
                    </div>
                </div>
            </nav>

            <main className="main-content">
                <Outlet/> {/* Placeholder for nested routes */}
            </main>

            { isAuthenticated && (
                <button className="floating-add-btn" title="Add Book" onClick={() => window.location.href = '/search'}>
                    +
                </button>
            )}


            <footer className="footer">
                <div className="footer-content">
                    <p>Developed by <a className="footer-link" target="_blank" href="https://www.linkedin.com/in/m-abdelgawad/">Mohamed AbdelGawad</a> </p>
                </div>
            </footer>
        </>
    );
}

export default AppLayout;

--- PATH: frontend\src\BooksAPI.js ---
const api = "https://reactnd-books-api.udacity.com";

let token = localStorage.token;

if (!token) token = localStorage.token = Math.random().toString(36).substr(-8);

const headers = {
  Accept: "application/json",
  Authorization: token,
};

export const get = (bookId) =>
  fetch(`${api}/books/${bookId}`, { headers })
    .then((res) => res.json())
    .then((data) => data.book);

export const getAll = () =>
  fetch(`${api}/books`, { headers })
    .then((res) => res.json())
    .then((data) => data.books);

export const update = (book, shelf) =>
  fetch(`${api}/books/${book.id}`, {
    method: "PUT",
    headers: {
      ...headers,
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ shelf }),
  }).then((res) => res.json());

export const search = (query, maxResults) =>
  fetch(`${api}/search`, {
    method: "POST",
    headers: {
      ...headers,
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ query, maxResults }),
  })
    .then((res) => res.json())
    .then((data) => data.books);

--- PATH: frontend\src\main.jsx ---
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import { RouterProvider } from 'react-router-dom'
import router from './routes/routes.jsx'
import './assets/css/styles.css'
import {AuthProvider} from "./context/AuthContext.jsx";
import {BooksProvider} from "./context/BooksContext.jsx";

createRoot(document.getElementById('root')).render(
  <StrictMode>
      <AuthProvider>
          <BooksProvider>
              <RouterProvider router={router} />
          </BooksProvider>
      </AuthProvider>
  </StrictMode>,
)

--- PATH: frontend\src\assets\css\styles.css ---
/* Typography */
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');

/* Reset and Base Styles */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

/* CSS Custom Properties for Unified Theme */
:root {
    /* Primary Brand Colors */
    --primary-50: #eff6ff;
    --primary-100: #dbeafe;
    --primary-200: #bfdbfe;
    --primary-300: #93c5fd;
    --primary-400: #60a5fa;
    --primary-500: #3b82f6;
    --primary-600: #2563eb;
    --primary-700: #1d4ed8;
    --primary-800: #1e40af;
    --primary-900: #1e3a8a;

    /* Neutral Colors */
    --gray-50: #f9fafb;
    --gray-100: #f3f4f6;
    --gray-200: #e5e7eb;
    --gray-300: #d1d5db;
    --gray-400: #9ca3af;
    --gray-500: #6b7280;
    --gray-600: #4b5563;
    --gray-700: #374151;
    --gray-800: #1f2937;
    --gray-900: #111827;

    /* Semantic Colors */
    --success-500: #10b981;
    --success-600: #059669;
    --warning-500: #f59e0b;
    --warning-600: #d97706;
    --error-500: #ef4444;
    --error-600: #dc2626;

    /* Typography */
    --font-family-base: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    --font-family-display: 'Cal Sans', 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;

    /* Spacing Scale */
    --space-1: 0.25rem;
    --space-2: 0.5rem;
    --space-3: 0.75rem;
    --space-4: 1rem;
    --space-5: 1.25rem;
    --space-6: 1.5rem;
    --space-8: 2rem;
    --space-10: 2.5rem;
    --space-12: 3rem;
    --space-16: 4rem;
    --space-20: 5rem;

    /* Border Radius */
    --radius-sm: 0.125rem;
    --radius-md: 0.375rem;
    --radius-lg: 0.5rem;
    --radius-xl: 0.75rem;
    --radius-2xl: 1rem;

    /* Shadows */
    --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
    --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);

    /* Layout */
    --navbar-height: 4rem;
    --footer-height: 3.5rem;
    --container-max-width: 75rem;
}

body {
    font-family: var(--font-family-base);
    line-height: 1.6;
    color: var(--gray-800);
    background-color: var(--gray-50);
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    font-size: 0.875rem;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

/* Focus Styles for Accessibility */
*:focus {
    outline: 2px solid var(--primary-500);
    outline-offset: 2px;
}

/* Layout Structure */
.navbar {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    height: var(--navbar-height);
    background-color: white;
    border-bottom: 1px solid var(--gray-200);
    z-index: 1000;
    box-shadow: var(--shadow-sm);
}

.nav-content {
    max-width: var(--container-max-width);
    margin: 0 auto;
    padding: 0 var(--space-6);
    height: 100%;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.nav-title {
    font-size: 1.25rem;
    font-weight: 700;
    color: var(--gray-900);
    text-decoration: none;
    transition: color 0.2s ease;
}

.nav-title:hover {
    color: var(--primary-600);
}

.nav-auth-btn {
    background-color: var(--primary-600);
    color: white;
    padding: var(--space-2) var(--space-4);
    border-radius: var(--radius-md);
    transition: all 0.2s ease;
    font-weight: 500;
    text-decoration: none;
    font-size: 0.875rem;
}

.nav-auth-btn:hover {
    background-color: var(--primary-700);
    transform: translateY(-1px);
    box-shadow: var(--shadow-md);
}

.nav-home-btn {
    background-color: var(--gray-100);
    color: var(--primary-600);
    margin-right: var(--space-3);
    padding: var(--space-2) var(--space-4);
    border-radius: var(--radius-md);
    font-weight: 500;
    text-decoration: none;
    font-size: 0.875rem;
    transition: all 0.2s ease;
}

.nav-home-btn:hover {
    background-color: var(--gray-200);
    transform: translateY(-1px);
    box-shadow: var(--shadow-md);
}

.main-content {
    flex: 1;
    margin-top: var(--navbar-height);
    margin-bottom: var(--footer-height);
    padding: var(--space-8) 0;
    min-height: calc(100vh - var(--navbar-height) - var(--footer-height));
}

.container {
    max-width: var(--container-max-width);
    margin: 0 auto;
    padding: 0 var(--space-6);
}

.footer {
    background-color: var(--gray-900);
    color: var(--gray-300);
    text-align: center;
    padding: var(--space-4) 0;
    margin-top: auto;
    height: var(--footer-height);
    display: flex;
    align-items: center;
    justify-content: center;
}

.footer-content {
    max-width: var(--container-max-width);
    margin: 0 auto;
    padding: 0 var(--space-6);
    font-size: 0.875rem;
}

/* Homepage Styles */
.homepage-hero {
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: calc(100vh - var(--navbar-height) - var(--footer-height));
    padding: var(--space-8) 0;
}

.hero-content {
    text-align: center;
    max-width: 56rem;
    padding: 0 var(--space-6);
}

.hero-title {
    font-size: 3rem;
    font-weight: 800;
    color: var(--gray-900);
    margin-bottom: var(--space-6);
    line-height: 1.1;
    letter-spacing: -0.02em;
}

.hero-subtitle {
    font-size: 1.25rem;
    color: var(--gray-600);
    margin-bottom: var(--space-12);
    line-height: 1.5;
    max-width: 42rem;
    margin-left: auto;
    margin-right: auto;
}

.hero-features {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: var(--space-8);
    margin-bottom: var(--space-12);
}

.feature-card {
    background: white;
    padding: var(--space-8);
    border-radius: var(--radius-xl);
    box-shadow: var(--shadow-lg);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.feature-card:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-xl);
}

.feature-icon {
    font-size: 2rem;
    margin-bottom: var(--space-4);
}

.feature-card h3 {
    font-size: 1.125rem;
    font-weight: 600;
    color: var(--gray-900);
    margin-bottom: var(--space-3);
}

.feature-card p {
    color: var(--gray-600);
    line-height: 1.6;
}

.hero-actions {
    display: flex;
    flex-wrap: wrap;
    gap: var(--space-4);
    justify-content: center;
    align-items: center;
}

.cta-button {
    padding: var(--space-3) var(--space-6);
    border-radius: var(--radius-md);
    font-weight: 600;
    text-decoration: none;
    transition: all 0.2s ease;
    font-size: 1rem;
    display: inline-block;
}

.cta-button.primary {
    background-color: var(--primary-600);
    color: white;
}

.cta-button.primary:hover {
    background-color: var(--primary-700);
    transform: translateY(-1px);
    box-shadow: var(--shadow-lg);
}

.cta-button.secondary {
    background-color: white;
    color: var(--primary-600);
    border: 2px solid var(--primary-600);
}

.cta-button.secondary:hover {
    background-color: var(--primary-50);
    transform: translateY(-1px);
}

.cta-button.tertiary {
    background-color: transparent;
    color: var(--gray-600);
    border: 2px solid var(--gray-300);
}

.cta-button.tertiary:hover {
    background-color: var(--gray-100);
    color: var(--gray-800);
}

/* Bookshelf Styles */
.bookshelf-section {
    margin-bottom: var(--space-12);
}

.shelf-title {
    font-size: 1.5rem;
    color: var(--gray-900);
    margin-bottom: var(--space-6);
    padding-bottom: var(--space-3);
    border-bottom: 2px solid var(--primary-200);
    font-weight: 600;
}

.books-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: var(--space-6);
    padding: var(--space-6);
    border-radius: var(--radius-lg);
    transition: all 0.3s ease;
    min-height: 300px;
}

/* Drop Zone Styling */
.drop-zone {
    border: 2px dashed transparent;
    transition: all 0.3s ease;
}

.drop-zone:hover {
    border-color: var(--primary-300);
    background-color: var(--primary-50);
}

.drop-zone.drag-over {
    border-color: var(--success-500);
    background-color: var(--success-500);
    transform: scale(1.02);
}

/* Empty Shelf Styles */
.empty-shelf {
    grid-column: 1 / -1;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: var(--space-12);
    text-align: center;
    background: white;
    border-radius: var(--radius-xl);
    border: 2px dashed var(--gray-300);
    transition: all 0.3s ease;
}

.empty-shelf:hover {
    border-color: var(--primary-400);
    background-color: var(--primary-50);
}

.empty-shelf-icon {
    font-size: 3rem;
    margin-bottom: var(--space-4);
    opacity: 0.6;
}

.empty-shelf h3 {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--gray-800);
    margin-bottom: var(--space-3);
}

.empty-shelf p {
    color: var(--gray-600);
    margin-bottom: var(--space-6);
    max-width: 320px;
}

.empty-shelf-link {
    background-color: var(--primary-600);
    color: white;
    padding: var(--space-3) var(--space-6);
    border-radius: var(--radius-md);
    text-decoration: none;
    font-weight: 500;
    transition: all 0.2s ease;
}

.empty-shelf-link:hover {
    background-color: var(--primary-700);
    transform: translateY(-1px);
    box-shadow: var(--shadow-md);
}

/* Book Card Styles */
.book-card {
    background: white;
    border-radius: var(--radius-lg);
    overflow: hidden;
    box-shadow: var(--shadow-md);
    transition: all 0.3s ease;
    position: relative;
    cursor: grab;
    height: auto;
}

.book-card:hover {
    transform: translateY(-4px);
    box-shadow: var(--shadow-xl);
}

.book-card.draggable:active {
    cursor: grabbing;
}

.book-card.dragging {
    opacity: 0.7;
    transform: rotate(5deg) scale(1.05);
    z-index: 100;
    box-shadow: var(--shadow-xl);
}

.book-cover {
    aspect-ratio: 3/4;
    overflow: hidden;
    background: var(--gray-100);
}

.book-cover img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
}

.book-card:hover .book-cover img {
    transform: scale(1.05);
}

.book-info {
    padding: var(--space-4);
    padding-bottom: calc(var(--space-8) + var(--space-4));
}

.book-title {
    font-size: 1rem;
    font-weight: 600;
    color: var(--gray-900);
    margin-bottom: var(--space-2);
    line-height: 1.3;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
}

.book-authors {
    font-size: 0.875rem;
    color: var(--gray-600);
    display: -webkit-box;
    -webkit-line-clamp: 1;
    -webkit-box-orient: vertical;
    overflow: hidden;
}

.shelf-selector {
    position: absolute;
    bottom: var(--space-3);
    right: var(--space-3);
}

.shelf-dropdown {
    background: var(--primary-600);
    color: white;
    border: none;
    padding: var(--space-2) var(--space-3);
    border-radius: var(--radius-md);
    font-size: 0.75rem;
    cursor: pointer;
    transition: all 0.2s ease;
    font-weight: 500;
}

.shelf-dropdown:hover {
    background: var(--primary-700);
    transform: translateY(-1px);
}

.shelf-dropdown.large {
    padding: var(--space-3) var(--space-4);
    font-size: 1rem;
    position: static;
    background: var(--gray-100);
    color: var(--gray-800);
    border: 1px solid var(--gray-300);
}

.shelf-dropdown.large:hover {
    background: var(--gray-200);
    border-color: var(--gray-400);
}

/* Floating Add Button */
.floating-add-btn {
    position: fixed;
    bottom: var(--space-8);
    right: var(--space-8);
    width: 60px;
    height: 60px;
    background: var(--success-600);
    color: white;
    border: none;
    border-radius: 50%;
    font-size: 1.5rem;
    cursor: pointer;
    box-shadow: var(--shadow-lg);
    transition: all 0.3s ease;
    z-index: 1000;
    text-decoration: none;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 600;
}

.floating-add-btn:hover {
    transform: translateY(-2px) scale(1.1);
    box-shadow: var(--shadow-xl);
}

/* Search Page Styles */
.search-section {
    max-width: 50rem;
    margin: 0 auto;
}

.search-input-container {
    margin-bottom: var(--space-8);
    text-align: center;
}

.search-input {
    width: 100%;
    max-width: 32rem;
    padding: var(--space-4) var(--space-6);
    font-size: 1.125rem;
    border: 2px solid var(--gray-300);
    border-radius: 2rem;
    background: white;
    transition: all 0.3s ease;
    box-shadow: var(--shadow-sm);
}

.search-input:focus {
    outline: none;
    border-color: var(--primary-500);
    box-shadow: var(--shadow-lg);
    transform: translateY(-1px);
}

.search-input::placeholder {
    color: var(--gray-500);
}

.search-results-title {
    font-size: 1.25rem;
    color: var(--gray-900);
    margin-bottom: var(--space-6);
    text-align: center;
    font-weight: 600;
}

/* Auth Pages Styles */
.auth-container {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: calc(100vh - var(--navbar-height) - var(--footer-height));
    padding: var(--space-8);
}

.auth-card {
    background: white;
    padding: var(--space-10);
    border-radius: var(--radius-xl);
    box-shadow: var(--shadow-xl);
    width: 100%;
    max-width: 400px;
    transition: transform 0.3s ease;
}

.auth-card:hover {
    transform: translateY(-2px);
}

.auth-title {
    text-align: center;
    margin-bottom: var(--space-8);
    color: var(--gray-900);
    font-size: 1.5rem;
    font-weight: 700;
}

.auth-form {
    display: flex;
    flex-direction: column;
    gap: var(--space-6);
}

.form-group {
    display: flex;
    flex-direction: column;
}

.form-label {
    margin-bottom: var(--space-2);
    color: var(--gray-800);
    font-weight: 500;
    font-size: 0.875rem;
}

.form-input {
    padding: var(--space-3);
    border: 2px solid var(--gray-300);
    border-radius: var(--radius-md);
    font-size: 1rem;
    transition: all 0.2s ease;
    background: white;
}

.form-input:focus {
    outline: none;
    border-color: var(--primary-500);
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

.auth-btn {
    background: var(--primary-600);
    color: white;
    border: none;
    padding: var(--space-4);
    border-radius: var(--radius-md);
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    margin-top: var(--space-2);
}

.auth-btn:hover {
    background: var(--primary-700);
    transform: translateY(-1px);
    box-shadow: var(--shadow-md);
}

.auth-link {
    text-align: center;
    margin-top: var(--space-6);
    color: var(--gray-600);
    font-size: 0.875rem;
}

.auth-link a {
    color: var(--primary-600);
    font-weight: 500;
    transition: color 0.2s ease;
    text-decoration: none;
}

.auth-link a:hover {
    color: var(--primary-700);
    text-decoration: underline;
}

/* Book Details Page */
.book-details-card {
    background: white;
    border-radius: var(--radius-xl);
    box-shadow: var(--shadow-xl);
    overflow: hidden;
    max-width: 56rem;
    margin: 0 auto;
    display: grid;
    grid-template-columns: 300px 1fr;
    gap: var(--space-8);
}

.book-details-cover {
    background: var(--gray-100);
    display: flex;
    align-items: center;
    justify-content: center;
    padding: var(--space-8);
}

.book-details-cover img {
    width: 100%;
    max-width: 250px;
    border-radius: var(--radius-lg);
    box-shadow: var(--shadow-lg);
}

.book-details-info {
    padding: var(--space-8);
    padding-left: 0;
}

.book-details-title {
    font-size: 2rem;
    color: var(--gray-900);
    margin-bottom: var(--space-2);
    line-height: 1.2;
    font-weight: 700;
}

.book-details-authors {
    font-size: 1.125rem;
    color: var(--gray-600);
    margin-bottom: var(--space-8);
    font-style: italic;
}

.book-details-shelf {
    margin-bottom: var(--space-8);
    display: flex;
    align-items: center;
    gap: var(--space-4);
}

.shelf-label {
    font-weight: 600;
    color: var(--gray-800);
    font-size: 0.875rem;
}

.book-details-description {
    line-height: 1.8;
}

.book-details-description h3 {
    color: var(--gray-900);
    margin-bottom: var(--space-4);
    font-size: 1.25rem;
    font-weight: 600;
}

.book-details-description p {
    margin-bottom: var(--space-4);
    color: var(--gray-700);
}

/* Responsive Design */
@media (max-width: 768px) {
    :root {
        --navbar-height: 3.5rem;
    }

    .nav-content {
        padding: 0 var(--space-4);
    }

    .nav-title {
        font-size: 1.125rem;
    }

    .container {
        padding: 0 var(--space-4);
    }

    .hero-title {
        font-size: 2rem;
    }

    .hero-subtitle {
        font-size: 1.125rem;
    }

    .hero-features {
        grid-template-columns: 1fr;
        gap: var(--space-6);
    }

    .feature-card {
        padding: var(--space-6);
    }

    .hero-actions {
        flex-direction: column;
        width: 100%;
    }

    .cta-button {
        width: 100%;
        text-align: center;
    }

    .books-grid {
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        gap: var(--space-4);
        padding: var(--space-4);
    }

    .book-info {
        padding: var(--space-3);
        padding-bottom: calc(var(--space-6) + var(--space-3));
    }

    .book-title {
        font-size: 0.875rem;
    }

    .book-authors {
        font-size: 0.75rem;
    }

    .floating-add-btn {
        width: 50px;
        height: 50px;
        bottom: var(--space-4);
        right: var(--space-4);
        font-size: 1.25rem;
    }

    .search-input {
        padding: var(--space-3) var(--space-5);
        font-size: 1rem;
    }

    .auth-card {
        padding: var(--space-8);
        margin: var(--space-4);
    }

    .book-details-card {
        grid-template-columns: 1fr;
        max-width: 600px;
    }

    .book-details-cover {
        padding: var(--space-6);
        order: -1;
    }

    .book-details-info {
        padding: var(--space-6);
    }

    .book-details-title {
        font-size: 1.5rem;
    }

    .book-details-shelf {
        flex-direction: column;
        align-items: flex-start;
    }

    .empty-shelf {
        padding: var(--space-8);
    }

    .empty-shelf-icon {
        font-size: 2rem;
    }
}

@media (max-width: 480px) {
    .books-grid {
        grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
    }

    .shelf-title {
        font-size: 1.25rem;
    }

    .main-content {
        padding: var(--space-4) 0;
    }

    .hero-title {
        font-size: 1.75rem;
    }
}

/* Accessibility Enhancements */
@media (prefers-reduced-motion: reduce) {
    * {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
    }
}

/* High Contrast Mode Support */
@media (prefers-contrast: high) {
    .book-card {
        border: 2px solid var(--gray-900);
    }

    .nav-auth-btn {
        border: 2px solid white;
    }

    .floating-add-btn {
        border: 2px solid white;
    }
}

/* Print Styles */
@media print {
    .navbar,
    .floating-add-btn,
    .footer {
        display: none;
    }

    .main-content {
        margin-top: 0;
        margin-bottom: 0;
    }

    .book-card {
        break-inside: avoid;
    }
}

/* ------------------------------ Start Written CSS Rules ------------------------------------*/

/* Start footer stays down */
/* Ensure the body and html take full height */
/*html, body, #root {*/
/*    height: 100%;*/
/*    margin: 0;*/
/*    padding: 0;*/
/*}*/

/*!* Make the layout fill the screen and push footer to bottom *!*/
/*body > #root {*/
/*    display: flex;*/
/*    flex-direction: column;*/
/*}*/

/*!* Main content grows to fill available space *!*/
/*.main-content {*/
/*    flex: 1;*/
/*}*/
/* End footer stays down */

/* Fix layout shift */
html {
    overflow-y: scroll;
}
.footer-link{
    color: var(--gray-300);
    text-decoration: underline;
    transition: color 0.2s ease;
}
.logo-icon{
    width: 16px;
    height: 16px;
    fill: var(--gray-300);
}
.shelf-selector.details-page {
    position: static;
}
/* ------------------------------ End Written CSS Rules ------------------------------------*/

--- PATH: frontend\src\components\common\ScrollToTop.jsx ---
/**
 * A React component that automatically scrolls the page to the top
 * whenever the route changes.
 *
 * This component uses the `useLocation` hook from `react-router-dom`
 * to monitor changes in the current pathname. When the pathname changes,
 * the `useEffect` hook triggers a scroll to the top of the page.
 *
 * @returns {null} This component does not render any visible UI.
 */
import { useEffect } from "react";
import { useLocation } from "react-router-dom";

export default function scrollToTop() {

    /**
     * Destructures the `pathname` property from the object returned by the `useLocation` hook.
     *
     * The `pathname` represents the current URL path, which is used to detect route changes.
     */
    const { pathname } = useLocation();

    useEffect(() => {
        // Scroll to the top of the page when the pathname changes
        window.scrollTo(0, 0);
    }, [pathname]);

    return null; // This component does not render anything
}

--- PATH: frontend\src\components\common\BookCard\BookCard.jsx ---
import ShelfSelector from "./ShelfSelector.jsx";
import { Link } from "react-router-dom";

export default function BookCard({ book, onShelfChange }) {
    return (
        <div className="book-card draggable">
            <div className="book-cover">
                {/* Note how we must close the img tag with /, while the original file didn't have that */}
                <img src={ book.imageLinks.thumbnail } alt={ book.title } />
            </div>
            <div className="book-info">
                <h3 className="book-title">
                    <Link to={`/book/${book.id}`} className="book-link">
                        { book.title }
                    </Link>
                </h3>
                <p className="book-authors">{ book.authors.join(', ') }</p>
            </div>
            <ShelfSelector
                value={ book.shelf || '' }
                onChange= {
                    (newShelf) => {
                        console.log("Changing shelf to:", newShelf);
                        onShelfChange(book.id, newShelf)
                    }
                }
            />

        </div>
    )
}

--- PATH: frontend\src\components\common\BookCard\ShelfSelector.jsx ---
export default function ShelfSelector({ value, onChange, className = '' }) {
    const handleChange = (event) => {
        const newShelf = event.target.value;

        // Optional: Confirm with user before removing
        if (newShelf === "") {
            if (!window.confirm("Remove this book from your shelf?")) return;
            onChange(null);  // or '' depending on your backend
        } else {
            onChange(newShelf);
        }
    };

    return (
        <div className={`shelf-selector ${className}`}>
            {/* Original template didn't have a default value as well and used selected on the option*/}
            {/* However, React controls the form element by passing the selected value through the value prop */}
            {/* VIP:  React expects the value on the <select> to exactly match the value on an <option> */}
            {/* so the value passed from database should be exactly the value string in the options */}
            <select className="shelf-dropdown" value={value} onChange={handleChange}>
                <option value="">Add to shelf...</option>
                <option value="currentlyReading">Currently Reading</option>
                <option value="wantToRead">Want to Read</option>
                <option value="read">Read</option>
            </select>
        </div>
    )
}

--- PATH: frontend\src\components\homepage\ShelfSection.jsx ---
import BookCard from '../common/BookCard/BookCard.jsx';
import {Link} from "react-router-dom";


export default function ShelfSection({title, books, onShelfChange}) {

    // If the books array is undefined or empty, we can consider it as an empty shelf.
    const isEmpty = !books || books.length === 0;

    return (
        <section className="bookshelf-section" data-shelf={title}>
            <h2 className="shelf-title">{title}</h2>
            <div className="books-grid drop-zone">
                {/* If the shelf is empty, we can show a message or a link to add books */}
                {isEmpty ? (
                    <div className="empty-shelf">
                        <div className="empty-shelf-icon">📚</div>
                        <h3>Your reading list is empty</h3>
                        <p>Discover new books and add them to your want-to-read list</p>
                        <Link to="/search" className="empty-shelf-link">Search for Books</Link>
                    </div>
                ) : (
                    books.map(
                        (book) => (
                            // The key prop is used by React to identify which items have changed, are added, or are removed.
                            // It is a good practice to use a unique identifier for the key prop, such as an ID from the book object.
                            // In this case, we use book.id as the key.
                            <BookCard key={book.id} book={book} onShelfChange={onShelfChange}/>
                        )
                    )

                )}
            </div>
        </section>
    )
}

--- PATH: frontend\src\context\AuthContext.jsx ---
import {createContext, useContext, useState, useEffect, useCallback} from 'react';
import {api} from "../utils/api.js";

// 1) Create a context for authentication
const AuthContext = createContext();

// 2) Custom hook to ease the use of the AuthContext
export function useAuth() {
    return useContext(AuthContext);
}

// 3) Helper to parse JWT Payload
function parseJWT(token){
    try {
        const payload = token.split('.')[1];
        return JSON.parse(atob(payload));
    } catch {
        return null;
    }
}

// AuthProvider component to provide authentication state and functions
export function AuthProvider({ children }) {

    // state to hold access token using lazy initialization
    const [accessToken, setAccessToken] = useState(
        () => localStorage.getItem('access_token')
    )

    // state to hold refresh token using lazy initialization
    const [refreshToken, setRefreshToken] = useState(
        () => localStorage.getItem('refresh_token')
    )

    // state to hold user authentication status
    const [isAuthenticated, setIsAuthenticated] = useState(
        () => Boolean(localStorage.getItem('access_token'))
    );

    // Optional: store user info if encoded in token
    const [user, setUser] = useState(
        () => {
            const token = localStorage.getItem('access_token');
            const payload = token ? parseJWT(token) : null;
            console.log("Parsed user from token:", payload);
            return payload ? { email: payload.sub, ...payload } : null;
        }
    );

    // 5) Function to refresh tokens
    const refreshTokens = useCallback(async () => {

        if (!refreshToken) {
            console.warn("No refresh token available, cannot refresh tokens.");
            return;
        }

        try {

            console.log("Refreshing tokens with refresh token:", refreshToken);
            const data = await api.post('/auth/refresh', { refresh_token: refreshToken });

            // update tokens
            setAccessToken(data.access_token);
            setRefreshToken(data.refresh_token);
            localStorage.setItem('access_token', data.access_token);
            localStorage.setItem('refresh_token', data.refresh_token);
            console.log("Tokens refreshed successfully:", data);

            // update user info if available
            const payload = parseJWT(data.access_token);
            if (payload) {
                setUser({ email: payload.sub, ...payload });
            }

            // Reshedule the next token refresh
            scheduleRefresh(data.access_token);
        } catch (err) {
            console.error("Token refresh failed:", err);
            logout(); // If refresh fails, log out the user
        }
    }, [refreshToken]); // end of refreshTokens

    // 6) Schedule automatic token refresh
    const scheduleRefresh = useCallback(
        (token) => {
            const payload = parseJWT(token);
            if (!payload || !payload.exp) return;

            const expiresAt = payload.exp * 1000; // Convert to milliseconds
            const now = Date.now();
            const buffer = 30 * 1000; // 30 seconds buffer before expiration
            const delay = Math.max(expiresAt - now - buffer, 0); // Ensure non-negative delay

            // clear any existing timer
            if (AuthProvider._refreshTimeout) {
                clearTimeout(AuthProvider._refreshTimeout);
            }

            // Schedule a new timer to refresh the token
            AuthProvider._refreshTimeout = setTimeout(() => {
                refreshTokens();
            }, delay);
            console.log(`Token refresh scheduled in ${delay} ms`);
        }, [refreshTokens]
    ) // end of scheduleRefresh

    // 7) Function to log in the user
    const login = useCallback(async (email, password) => {

        const data = await api.post('/auth/login', { email, password });

        // save tokens to local storage
        setAccessToken(data.access_token);
        setRefreshToken(data.refresh_token);
        localStorage.setItem('access_token', data.access_token);
        localStorage.setItem('refresh_token', data.refresh_token);
        setIsAuthenticated(true);

        // update user info if available
        const payload = parseJWT(data.access_token);
        if (payload) {
            setUser({ email: payload.sub, ...payload });
        }

        // Reschedule the next token refresh
        scheduleRefresh(data.access_token);
    }, [scheduleRefresh]); // end of login

    // 8) Function to log out the user
    const logout = useCallback(() => {
        setAccessToken(null);
        setRefreshToken(null);
        setIsAuthenticated(false);
        setUser(null);
        localStorage.removeItem('access_token');
        localStorage.removeItem('refresh_token');
        // Clear any existing refresh timeout
        if (AuthProvider._refreshTimeout) {
            clearTimeout(AuthProvider._refreshTimeout);
        }

    }, []) // end of logout

    // 9) Effect to handle initial token setup and refresh scheduling
    useEffect(() => {
        // If access token exists, set it and schedule refresh
        if (accessToken) {
            console.log("Access token found:", accessToken);
            scheduleRefresh(accessToken);
        } else {
            console.log("No access token found, user is not authenticated.");
        }

        // Cleanup function to clear the refresh timeout on unmount
        return () => {
            if (AuthProvider._refreshTimeout) {
                clearTimeout(AuthProvider._refreshTimeout);
            }
        };
    }, [accessToken, scheduleRefresh]); // end of useEffect

    // 10) Context value to be provided
    const value = {
        accessToken,
        refreshToken,
        isAuthenticated,
        user,
        login,
        logout,
        refreshTokens,
    };

    // 11) Return the AuthContext provider with the value
    return (
        <AuthContext.Provider value={value}>
            {children}
        </AuthContext.Provider>
    )


} // end of AuthProvider

--- PATH: frontend\src\context\BooksContext.jsx ---
// src/context/BooksContext.jsx
import { createContext, useContext, useEffect, useState, useCallback } from "react";
import { useAuth } from "./AuthContext.jsx";        // <-- NEW
import { api } from "../utils/api.js";

const BooksContext = createContext();

export function BooksProvider({ children }) {
    const { isAuthenticated } = useAuth();            // <-- NEW
    const [books, setBooks]     = useState([]);
    const [loading, setLoading] = useState(true);

    const fetchBooks = useCallback(async () => {
        if (!isAuthenticated) {
            setBooks([]);          // clear old data when logged out
            setLoading(false);
            return;
        }

        setLoading(true);
        try {
            const data = await api.get("/books");
            setBooks(data);
        } catch (err) {
            console.error("Error fetching books:", err.message);
        } finally {
            setLoading(false);
        }
    }, [isAuthenticated]);

    // effect depends on auth status
    useEffect(() => {
        fetchBooks();
    }, [fetchBooks]);

    const updateBookShelf = async (bookId, newShelf) => {
        if (!isAuthenticated) return;
        await api.put(`/books/${bookId}`, { shelf: newShelf });   // backend now accepts null
        setBooks(prev =>
            prev.map(b => (b.id === bookId ? { ...b, shelf: newShelf } : b))
        );
    };

    return (
        <BooksContext.Provider value={{ books, loading, updateBookShelf }}>
            {children}
        </BooksContext.Provider>
    );
}

export const useBooks = () => useContext(BooksContext);

--- PATH: frontend\src\pages\BookDetailsPage.jsx ---
// src/pages/BookDetailsPage.jsx
import { useEffect, useState } from "react";
import { useParams, Link } from "react-router-dom";
import { useBooks } from "../context/BooksContext";
import { api } from "../utils/api";
import ShelfSelector from "../components/common/BookCard/ShelfSelector.jsx";

export default function BookDetailsPage() {
    const { id } = useParams();            // 👉 book id from URL
    const { books, updateBookShelf } = useBooks();
    const [book, setBook]   = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError]     = useState(null);

    // 1) Try to find book in already-fetched list
    useEffect(() => {
        const cachedBook = books.find(b => b.id === id);
        if (cachedBook) {
            setBook(cachedBook);
            setLoading(false);
        } else {
            // 2) Otherwise fetch from backend
            async function fetchBook() {
                try {
                    const data = await api.get(`/books/${id}`);
                    setBook(data);
                } catch (err) {
                    setError("Could not load book.");
                } finally {
                    setLoading(false);
                }
            }
            fetchBook();
        }
    }, [id, books]);

    // 3) Update title
    useEffect(() => {
        document.title = book ? `${book.title} | MyReads` : "Book Details | MyReads";
    }, [book]);

    // 4) Handle shelf change
    const handleShelfChange = (newShelf) => {
        updateBookShelf(book.id, newShelf);  // context updates global + backend
        setBook({ ...book, shelf: newShelf }); // local instantaneous update
    };

    // UI states
    if (loading) return <div className="container"><p>Loading…</p></div>;
    if (error  ) return <div className="container"><p className="error-msg">{error}</p></div>;
    if (!book  ) return null; // should not happen

    return (
        <div className="container">
            <Link to="/" className="btn-link">← Back</Link>

            <div className="book-details-card">
                <div className="book-details-cover">
                    <img src={book.imageLinks.thumbnail} alt={`${book.title} cover`} />
                </div>

                <div className="book-details-info">
                    <h1 className="book-details-title">{book.title}</h1>
                    <p className="book-details-authors">by {book.authors.join(", ")}</p>

                    <div className="book-details-shelf">
                        <label htmlFor="current-shelf">Current Shelf:&nbsp;</label>
                        <ShelfSelector
                            className="details-page"
                            value={book.shelf || ""}
                            onChange={handleShelfChange}
                        />
                    </div>

                    {book.description && (
                        <div className="book-details-description">
                            <h3>Description</h3>
                            <p>{book.description}</p>
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
}

--- PATH: frontend\src\pages\HomePage.jsx ---
import ShelfSection from "../components/homepage/ShelfSection.jsx";
import React, {useEffect, useState} from "react";
import { api } from "../utils/api.js";

// define mock book data
function getBooksByShelf(allBooks, shelfName){
    return allBooks.filter(
        (book) => book.shelf === shelfName
    )
}

function HomePage() {
    // This component represents the home page of the application.

    useEffect(() => {
        document.title = "Home | MyReads";
    }, []);

    // 1) state for books, loading, and error
    const [books, setBooks] = useState([]) // Full list from API. intialized with empty array
    const [loading, setLoading] = useState(true) // Loading state to show a spinner or loading message
    const [error, setError] = useState(null) // Error state to handle any errors during data fetching

    // 2) Fetch books once when the component mounts
    useEffect(() => {

        async function fetchBooks() {

            setLoading(true); // Set loading to true before fetching data
            setError(null); // Reset error state

            try {

                console.log("Fetching user’s books…");

                // Get /books/
                const data = await api.get("/books");
                console.log("Fetched books:", data);

                setBooks(data); // Set the books state with the fetched data

            }  catch (err) {
                console.log("Error fetching books:", err);
                setError(err.message || "Failed to load books.");
            } finally {
                setLoading(false); // Set loading to false after fetching data
            }

        }

        fetchBooks(); // Call the fetchBooks function to initiate data fetching

    }, []); // run only once (StrictMode will still call twice in dev)

    // We will update backend when the user changes a book's shelf
    // Once the backend is updated, we will update the local state to reflect the change
    async function handleShelfChange(bookId, newShelf) {
        try {
            await api.put(`/books/${bookId}`, { shelf: newShelf });
            // We have our API component to throw errors if the request fails.
            // So if the request is successful, we can assume the book was updated.

            // update local state to reflect the change
            setBooks((prevBooks) =>
                prevBooks.map((book) =>
                    book.id === bookId ? { ...book, shelf: newShelf } : book
                )
            );
        } catch (err) {
            console.error("Error updating book shelf:", err);
            setError(err || "Failed to update book shelf.");
        }

        //
    }

    // 3) Handle loading and error states
    const shelves = {
        currentlyReading: getBooksByShelf(books, "currentlyReading"),
        wantToRead: getBooksByShelf(books, "wantToRead"),
        read: getBooksByShelf(books, "read")
    };

    console.log("Shelves data:", shelves);

    // 4) Render loading / error / content
    if (error) {
        return <div className="error">Error loading books: {error.message}</div>;
    }

    return (
        <div className="container">

            <ShelfSection title="Currently Reading" books={shelves.currentlyReading} onShelfChange={handleShelfChange}/>
            <ShelfSection title="Want To Read" books={shelves.wantToRead} onShelfChange={handleShelfChange}/>
            <ShelfSection title="Read" books={shelves.read} onShelfChange={handleShelfChange}/>

        </div>
    );
}

export default HomePage;

--- PATH: frontend\src\pages\LoginPage.jsx ---
import React, {useState, useEffect} from "react";
import { api } from '../utils/api.js'
import {useNavigate, Link} from "react-router-dom";
import {useAuth} from "../context/AuthContext.jsx";

function LoginPage(){

    useEffect(() => {
        document.title = "Login | MyReads";
    }, []);

    // 1) Form Field State
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');

    // 2) State variables for UI status
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);
    const [success, setSuccess] = useState(false);

    const navigate = useNavigate(); // Hook to programmatically navigate between routes

    // Access the authentication context to check if user is already authenticated
    const { login, isAuthenticated } = useAuth();

    // Use useEffect to handle the redirect for already authenticated users
    useEffect(() => {
        if (isAuthenticated) {
            console.log("User is already authenticated, redirecting to home page...");
            navigate('/');
        }
    }, [isAuthenticated, navigate]);

    // 3) Handle form submission
    async function handleSubmit(event) {

        // Prevents the default form submission behavior which would cause a page reload
        event.preventDefault();

        // Reset any previous error state
        setError(null);

        // Basic client-side validation
        if (!email || !password) {
            setError("Email and password are required");
            return;
        }

        // Set loading state to true to indicate a process is ongoing
        setLoading(true);

        // Attempt to call the backend API to log in the user
        try {
            await login(email, password);
            setSuccess(true);

            // Redirect to the home page after successful login after a short delay
            setTimeout(() => {
                navigate('/'); // Redirect to home page
            }, 1000); // 1 second delay
        } catch (error) {
            console.error("Login error:", error);
            console.error("Error details:", error.data || error.message);
            console.error("Error status:", error.status);
            setError(error.message || "An error occurred during login");
        } finally {
            // Reset loading state after the request is complete
            setLoading(false);
        }
    } // end of handleSubmit

    // If the user is authenticated, return a loading message instead of null
    // to prevent empty screen while redirecting
    if (isAuthenticated) {
        return (
            <div className="auth-container">
                <div className="auth-card">
                    <p className="auth-success">Already logged in. Redirecting to homepage...</p>
                </div>
            </div>
        );
    }

    return (
        <div className="auth-container">
            <div className="auth-card">
                <h2 className="auth-title">Login to BookShelf</h2>

                {error && <p className="auth-error">Error: {error}</p>}

                { success ? (
                    <p className="auth-success">Login successful! Redirecting...</p>
                ) : (
                    <form
                        className="auth-form"
                        role="form"
                        aria-label="Login form"
                        onSubmit={handleSubmit}
                    >

                        <div className="form-group">
                            <label htmlFor="email" className="form-label">Email</label>
                            <input
                                type="email"
                                id="email"
                                className="form-input"
                                required
                                aria-describedby="email-error"
                                value={email}
                                onChange={(e) => setEmail(e.target.value)}
                                disabled={loading} // Disable input while loading
                            />
                        </div>

                        <div className="form-group">
                            <label htmlFor="password" className="form-label">Password</label>
                            <input
                                type="password"
                                id="password"
                                className="form-input"
                                required
                                aria-describedby="password-error"
                                value={password}
                                onChange={(e) => setPassword(e.target.value)}
                                disabled={loading} // Disable input while loading
                            />
                        </div>

                        <button
                            type="submit"
                            className="auth-btn"
                            disabled={loading} // Disable button while loading
                        >
                            {loading ? 'Logging in...' : 'Login'}
                        </button>

                    </form>
                )}

                <p className="auth-link">
                    Don't have an account? <Link to="/signup">Sign Up Here</Link>
                </p>

            </div>
        </div>
    )
}

export default LoginPage;

--- PATH: frontend\src\pages\SearchPage.jsx ---
import {useEffect, useState} from "react";
import { useBooks } from "../context/BooksContext";
import BookCard from "../components/common/BookCard/BookCard.jsx";

function SearchPage() {

    useEffect(() => {
        document.title = "Search | MyReads";
    }, []);

    const { books, updateBookShelf } = useBooks();
    const [query, setQuery] = useState("");

    const filteredBooks = books.filter(book => {
        const lower = query.toLowerCase();
        return (
            book.title.toLowerCase().includes(lower) ||
            book.authors?.some(author => author.toLowerCase().includes(lower)) ||
            book.id.toLowerCase().includes(lower)
        );
    });

    return (
        <div className="container">
            <div className="search-section">
                <div className="search-input-container">
                    <input
                        type="text"
                        className="search-input"
                        placeholder="Search for books, authors, or ISBN..."
                        value={query}
                        onChange={(e) => setQuery(e.target.value)}
                    />
                </div>

                <div className="search-results">
                    <h2 className="search-results-title">Search Results</h2>
                    <div className="books-grid">
                        {filteredBooks.length > 0 ? (
                            filteredBooks.map(book => (
                                <BookCard
                                    key={book.id}
                                    book={book}
                                    onShelfChange={updateBookShelf}
                                />
                            ))
                        ) : (
                            <p>No matching books found.</p>
                        )}
                    </div>
                </div>
            </div>
        </div>
    );
}

export default SearchPage;

--- PATH: frontend\src\pages\SignupPage.jsx ---
import React, {useEffect, useState} from 'react';
import { api } from '../utils/api.js'
import {useNavigate, Link} from "react-router-dom";

function SingupPage() {

    useEffect(() => {
        document.title = "Signup | MyReads";
    }, []);

    // 1) Form Field State

    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [confirmPassword, setConfirmPassword] = useState('');

    // 2) State variables for UI status

    // `loading`: Indicates whether a process (e.g., form submission) is in progress
    const [loading, setLoading] = useState(false);

    // `error`: Stores any error message related to the form submission
    const [error, setError] = useState(null);

    // `success`: Indicates whether the form submission was successful
    const [success, setSuccess] = useState(false);

    /**
     * A hook provided by `react-router-dom` to programmatically navigate between routes.
     *
     * @constant
     * @type {function}
     * @returns {function} A function that can be used to navigate to a different route.
     */
    const navigate = useNavigate();

    // 3) Handle form submission

    // Takes an event object `e` as an argument
    async function handleSubmit(e){

        // Prevents the default form submission behavior which would cause a page reload
        e.preventDefault()

        // Resets any previous error state
        setError(null)

        // Basic client-side validation
        if (password !== confirmPassword){
            setError("Passwords do not match");
            return;
        }

        if (!email || !password || !confirmPassword) {
            setError("All fields are required");
            return;
        }

        // Sets loading state to true to indicate a process is ongoing
        setLoading(true);

        // Let's try to call the backend API to create a new user account
        try {
            const response = await api.post('/auth/signup', { email, password })
            console.log("Signup successful:", response);
            setSuccess(true); // Set success state to true
            // Optional: auto-redirect to login after a short delay
            setTimeout(() => navigate("/login"), 1500);
        } catch (err) {
            // If an error occurs, we log it to the console and error status code as well
            console.log("Signup failed:", err);
            console.log("Error status code:", err.status);
            setError(err.message);
        } finally {
            // Regardless of success or failure, we set loading to false; because the process is complete
            setLoading(false);
        }

    } // End of handleSubmit function

    return (
        <div className="auth-container">
            <div className="auth-card">
                <h2 className="auth-title">Create Account</h2>

                {/* Below is conditional rendering in react. If error exist, show the div*/}
                { error && <p className="auth-error">Error: {error}</p> }

                { success ? (
                    <div className="success-msg">
                      Account created! Redirecting to <Link to="/login">Login</Link>...
                    </div>
                ) : (

                    <form
                        className="auth-form"
                        role="form"
                        aria-label="Sign up form"
                        onSubmit={handleSubmit} // Attach the handleSubmit function to the form's onSubmit event
                    >

                        <div className="form-group">
                            <label htmlFor="email" className="form-label">Email</label>
                            <input
                                type="email"
                                id="email"
                                className="form-input"
                                required aria-describedby="email-error"
                                value={ email }
                                onChange={ (e) => setEmail(e.target.value)}
                                disabled={loading} // Disable input while loading
                            />
                        </div>

                        <div className="form-group">
                            <label htmlFor="password" className="form-label">Password</label>
                            <input
                                type="password"
                                id="password"
                                className="form-input"
                                required
                                aria-describedby="password-error"
                                value={ password }
                                onChange={(e) => setPassword(e.target.value)}
                                disabled={loading} // Disable input while loading
                            />
                        </div>

                        <div className="form-group">
                            <label htmlFor="confirm-password" className="form-label">Confirm Password</label>
                            <input
                                type="password"
                                id="confirm-password"
                                className="form-input"
                                required
                                aria-describedby="confirm-password-error"
                                value={confirmPassword}
                                onChange={(e) => setConfirmPassword(e.target.value)}
                                disabled={loading} // Disable input while loading
                            />
                        </div>

                        <button
                            type="submit"
                            className="auth-btn"
                            disabled={loading} // Disable button while loading
                        >
                            {loading ? 'Creating Account...' : 'Sign Up'}
                        </button>

                    </form>

                )}
                <p className="auth-link">
                    Already have an account? <Link to="/login">Login here</Link>
                </p>
            </div>
        </div>
    ); // End of return statement
} // End of SignupPage component

export default SingupPage;

--- PATH: frontend\src\routes\RequireAuth.jsx ---
import { useAuth } from '../context/AuthContext';
import { Navigate, useLocation } from 'react-router-dom';

export default function RequireAuth({ children }) {

    const { isAuthenticated } = useAuth();
    const location = useLocation(); // Get the current location to redirect after login... nice, right?

    if (!isAuthenticated) {
        // If the user is not authenticated, redirect to the login page
        // and pass the current location so they can be redirected back after login
        return <Navigate to="/login" state={{ from: location }} replace />;
    }

    return children; // If authenticated, render the child components
}

--- PATH: frontend\src\routes\routes.jsx ---
/**
 * App routes setup using react-router-dom.
 * The root path `/` renders the AppLayout component.
 * Nested routes (children) are rendered inside AppLayout.
 */
import { createBrowserRouter } from "react-router-dom";
import AppLayout from "../AppLayout.jsx";
import HomePage from "../pages/HomePage.jsx";
import SearchPage from "../pages/SearchPage.jsx";
import BookDetailsPage from "../pages/BookDetailsPage.jsx";
import LoginPage from "../pages/LoginPage.jsx";
import SignupPage from "../pages/SignupPage.jsx";
import RequireAuth from "./RequireAuth.jsx"; // Importing the RequireAuth component for protected routes

const router = createBrowserRouter([
    {
        path: "/",
        element: <AppLayout />, // AppLayout always appears at `/` and all its children
        children: [

            {
                index: true, // This child matches the exact `/` path
                element:
                    <RequireAuth>
                        {/* RequireAuth wraps the page to protect it */}
                        <HomePage />
                    </RequireAuth>
            },

            {
                path: "search",
                element:
                    <RequireAuth>
                        {/* RequireAuth wraps the page to protect it */}
                        <SearchPage />
                    </RequireAuth>
            },

            {
                path: "book/:id",
                element:
                    <RequireAuth>
                        {/* RequireAuth wraps the page to protect it */}
                        <BookDetailsPage />
                    </RequireAuth>
            },

            {
                path: "login",
                element:
                    <LoginPage />
            },

            {
                path: "signup",
                element:
                    <SignupPage />
            },

        ]
    },
]);

export default router;

--- PATH: frontend\src\utils\api.js ---
const BASE_URL = import.meta.env.VITE_API_URL;
console.log(`API Base URL: ${BASE_URL}`);

function getToken() {
    return localStorage.getItem('access_token')
}

async function request(method, endpoint, body=null, customHeaders={}){

    const headers = {
        'content-type': 'application/json',
        ...customHeaders,
    };

    const token = getToken();

    if (token) {
        headers['Authorization'] = `Bearer ${token}`;
    }

    const apiURL = `${BASE_URL}${endpoint}`
    console.log(`Making ${method} request to: ${apiURL}`);

    // Ensure body is serializable before using JSON.stringify
    const processedBody = body ? sanitizeRequestBody(body) : null;

    const response = await fetch(apiURL, {
        method,
        headers,
        body: processedBody ? JSON.stringify(processedBody) : null,
    });

    const contentType = response.headers.get('content-type');

    const data = contentType && contentType.includes('application/json') ? await response.json() : await response.text();
    console.log(`Response from ${method} ${endpoint}:`, data);
    if (!response.ok) {
        const error = new Error(data.detail || data.message || 'An error occurred');
        error.status = response.status;
        error.data = data;
        throw error;
    }

    return data;
}

// Helper function to sanitize request body and prevent circular references
function sanitizeRequestBody(body) {
    if (!body) return null;

    // Handle DOM elements or React components by creating a new plain object
    const sanitized = {};

    // Copy only plain properties
    Object.keys(body).forEach(key => {
        const value = body[key];
        // Include only primitive values (string, number, boolean) or arrays of primitives
        if (
            typeof value === 'string' ||
            typeof value === 'number' ||
            typeof value === 'boolean' ||
            (Array.isArray(value) && value.every(item =>
                typeof item === 'string' ||
                typeof item === 'number' ||
                typeof item === 'boolean'
            ))
        ) {
            sanitized[key] = value;
        }
    });

    return sanitized;
}

export const api = {
    get: (endpoint, customHeaders={}) => request('GET', endpoint, null, customHeaders),
    post: (endpoint, body, customHeaders={}) => request('POST', endpoint, body, customHeaders),
    put: (endpoint, body, customHeaders={}) => request('PUT', endpoint, body, customHeaders),
    delete: (endpoint, customHeaders={}) => request('DELETE', endpoint, null, customHeaders),
}
